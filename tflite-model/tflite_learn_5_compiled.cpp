/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 21.06.2024 19:05:25

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70336;
#else
constexpr int kTensorArenaSize = 69312;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032068127766251564, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 45004, -48449, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 7.7187272836454213e-05, 7.1995869802776724e-05, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 75,-40,-50,98,-79,5,-60,63,127,-26,-43,-23,-16,71,-58,25,111,-84,-39,-98,90,69,89,-64,-48,-68,-35,72,15,-78,-20,59, 
  /* [1][0][][] */ 55,87,84,-65,-78,87,-6,20,-44,-21,47,121,124,52,49,3,-40,7,-64,-96,-81,47,25,124,95,69,-51,-4,110,-127,-112,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0035771576222032309, 0.0033365681301802397, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -330, 635, 649, -537, -489, 709, -598, 630, -310, 79, 671, 638, 646, 594, 673, -632, -626, 557, -312, -492, -632, 689, -880, 753, 417, -505, -418, -425, -64, 711, -336, -547, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 3.4458316804375499e-05, 3.8236310501815751e-05, 3.7481324397958815e-05, 3.6840308894170448e-05, 3.3834476198535413e-05, 3.481203384581022e-05, 3.7316705856937915e-05, 3.8224410673137754e-05, 3.5778524761553854e-05, 3.949501842726022e-05, 3.8362348277587444e-05, 3.8158195820869878e-05, 3.7468853406608105e-05, 4.0476665162714198e-05, 3.8551355828531086e-05, 3.54703952325508e-05, 3.7834579416085035e-05, 3.7935424188617617e-05, 3.4073218557750806e-05, 3.5665503673953936e-05, 3.4116237657144666e-05, 3.6546669434756041e-05, 3.7876285205129534e-05, 3.3103013265645131e-05, 3.7864792830077931e-05, 3.8435398892033845e-05, 4.0193423046730459e-05, 3.637896224972792e-05, 3.9016875234665349e-05, 3.7017918657511473e-05, 3.5484259569784626e-05, 3.7668873119400814e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -42,-60,110,7,98,-16,-97,-116,66,-111,-122,-7,55,5,-47,52,-62,-41,-73,-66,-81,-120,-2,113,-127,3,77,-53,114,-4,-29,-96,85,-69,-107,68,-127,-93,-106,25,75,-99,-110,103,54,-120,114,-27, 
  /* [1][0][][] */ -51,44,-59,8,-27,90,49,16,92,-89,-90,113,71,-15,35,76,87,-35,43,127,-38,5,45,37,46,29,-54,118,22,16,107,-55,51,115,-3,38,62,72,-8,-51,-50,18,-13,-90,-25,46,-36,-54, 
  /* [2][0][][] */ 52,49,-50,105,-10,-49,100,102,-87,97,-23,125,97,-4,94,-100,-78,-22,42,65,-88,-5,121,32,-13,92,90,22,-58,91,88,104,-78,-8,-87,-97,-76,107,111,-15,-106,-64,24,-1,-75,127,-32,-79, 
  /* [3][0][][] */ 72,4,33,-30,-78,44,-123,33,45,15,61,-1,96,92,68,4,127,95,-61,7,111,-96,-70,-124,-32,-122,-62,101,37,-109,82,2,-36,-44,-20,-21,-100,-32,54,42,-33,-100,-106,0,68,22,-51,-73, 
  /* [4][0][][] */ 51,109,-7,53,-35,-35,27,10,57,91,-16,52,23,-47,-20,-77,-8,-11,-77,9,111,-106,90,24,-31,-11,75,-74,-61,29,-81,-63,77,120,12,-120,-60,-14,-127,45,-62,-73,-88,-102,28,107,38,61, 
  /* [5][0][][] */ 110,-86,95,100,55,-112,41,68,127,-113,11,-63,33,117,50,51,44,71,-70,116,43,66,28,-18,-98,-56,-29,-85,64,44,28,-97,-46,14,-68,29,-112,-27,57,36,-84,-44,54,110,-27,35,36,-55, 
  /* [6][0][][] */ 13,-51,106,69,-91,-70,-9,61,-21,-89,-1,-94,81,49,108,-125,50,-3,-5,96,-84,-125,103,52,-66,-89,-9,-65,-35,-120,40,-83,-91,-127,-50,-112,-16,33,-114,73,80,50,17,-19,-117,100,-87,-49, 
  /* [7][0][][] */ 123,77,-26,-31,-59,123,-8,8,127,15,-84,24,62,-76,57,84,41,23,7,123,62,45,4,95,-59,111,33,67,-65,115,-10,45,20,35,72,109,-93,97,-3,-16,104,-64,94,73,60,7,97,-109, 
  /* [8][0][][] */ 19,32,-54,-101,56,23,-88,-26,-2,30,42,99,13,-54,-96,-84,-52,102,-64,11,33,-31,81,108,-111,93,62,69,-79,28,-92,117,108,-41,50,-5,118,-5,-15,68,80,99,-122,-127,10,-22,-3,118, 
  /* [9][0][][] */ 0,10,108,44,85,-84,-45,-107,53,64,-8,59,-16,-70,-93,-23,19,6,-93,-63,12,99,-101,-100,127,4,4,39,-3,-38,-74,102,73,1,31,-20,-67,16,-29,-22,54,-55,50,-71,85,33,-79,55, 
  /* [10][0][][] */ -54,92,102,-54,-4,114,117,36,51,42,36,-57,104,91,-22,23,-54,84,-88,-50,-9,39,66,-57,44,65,-127,-98,-36,89,-82,-70,73,110,122,82,-29,18,-27,46,-23,125,-99,-32,-85,-46,-6,-60, 
  /* [11][0][][] */ 115,23,-3,113,127,55,64,37,122,102,-63,119,1,-72,39,-53,-75,-95,71,51,40,84,33,-97,-92,-82,-35,82,89,4,35,-10,-97,-59,58,55,-51,86,-22,-46,-15,114,-63,10,-32,-48,-94,-88, 
  /* [12][0][][] */ 14,79,-42,13,100,19,-22,40,-63,73,0,23,-45,25,61,-66,-119,-31,-43,-69,34,0,27,109,-70,-36,90,-84,105,18,-28,125,-92,-57,-42,26,8,-61,-15,55,127,52,-100,-35,-39,-81,-60,115, 
  /* [13][0][][] */ 109,-45,106,100,98,117,86,67,79,-85,22,-17,91,77,73,-33,-127,-60,-58,37,72,-16,118,-33,-50,48,-5,30,-70,-73,86,44,32,107,-13,44,-68,-16,29,75,-48,83,-39,16,-31,36,-7,-27, 
  /* [14][0][][] */ -51,-82,98,80,89,-16,-2,-104,-61,-23,82,91,-21,-67,-75,-71,-69,-53,22,36,-32,44,9,72,-104,-56,-40,45,-98,-102,-65,49,97,-9,-25,17,106,127,41,-95,7,-96,45,92,71,-106,51,-80, 
  /* [15][0][][] */ 13,-36,-38,69,88,-101,55,-108,53,-11,-86,3,106,-6,-104,-127,106,6,-104,17,43,12,70,107,72,61,48,87,13,49,61,-114,9,-2,-72,-12,-79,109,110,-83,8,109,-58,-29,20,-90,-43,-86, 
  /* [16][0][][] */ -73,-9,92,-70,32,102,-64,33,37,38,-118,63,-18,-57,-62,-70,127,75,64,55,102,70,-46,42,-45,44,-52,51,-110,4,32,4,-94,66,51,49,-44,43,-54,-79,12,-56,63,86,55,93,109,-10, 
  /* [17][0][][] */ 19,-94,43,94,-29,-99,-52,-98,57,-73,99,61,98,74,-101,63,14,41,101,127,-83,-2,22,-39,39,82,-96,42,120,-39,-20,86,-49,-9,26,14,-35,113,-92,-15,-81,-26,-6,-21,9,19,73,-127, 
  /* [18][0][][] */ -106,127,114,-80,-13,-124,-117,2,-10,77,-120,-54,-31,33,62,-66,43,-28,61,-30,108,-54,20,-91,28,-109,2,117,28,35,-2,43,69,-31,-119,-120,-39,33,-24,65,-49,-5,-59,-14,-127,13,26,18, 
  /* [19][0][][] */ 16,28,75,36,57,-92,96,92,93,-69,26,-15,-101,31,-62,59,99,-112,110,56,-26,80,-61,10,77,-87,34,-75,-99,-127,-71,44,86,-90,32,-5,5,-76,-61,-109,42,-125,-90,8,-93,27,82,-98, 
  /* [20][0][][] */ -17,70,68,96,-101,92,13,57,7,6,-102,-3,-16,88,36,-87,-40,-46,-78,-42,18,-56,-89,-84,74,-88,-111,42,17,4,-50,117,110,41,-22,54,38,-43,-23,-127,-99,-46,-104,-115,-38,-79,-76,113, 
  /* [21][0][][] */ 102,88,85,-94,110,-68,86,25,9,-56,-63,52,12,50,-41,-81,-127,-26,35,-3,119,-40,82,-75,68,-78,-45,87,26,14,1,-13,-1,32,-88,-106,123,110,-113,-23,3,18,39,-11,-92,-75,-94,94, 
  /* [22][0][][] */ 18,-54,-84,-108,87,-67,98,42,-94,86,-75,-116,98,-112,-123,-93,34,70,-122,-72,74,-87,18,17,92,-7,-127,100,-72,-86,-73,-123,36,50,4,-2,-7,-27,-73,-118,-10,-22,-12,92,45,-127,85,-36, 
  /* [23][0][][] */ 76,-90,18,77,122,-118,17,-108,78,-79,110,94,26,-110,33,-33,75,-35,-113,125,114,-81,127,-28,-11,-4,78,38,92,65,90,-34,-54,61,27,48,121,4,-121,19,-108,13,21,-121,-72,-92,114,28, 
  /* [24][0][][] */ -73,-66,-93,-59,-78,-99,-57,-83,79,127,91,46,111,72,-29,-115,-100,46,33,-42,103,-74,-54,-28,64,-21,54,70,118,66,9,-57,-21,19,49,37,-47,-75,51,-12,-67,-91,112,2,30,-26,41,58, 
  /* [25][0][][] */ -100,-70,-82,-13,80,-90,-114,44,28,-127,-57,9,53,-10,-117,-31,-89,47,14,-112,53,72,-19,-58,-5,-69,-115,20,63,-107,22,103,82,-114,31,56,84,-75,-42,-34,-96,92,-110,-6,77,21,44,21, 
  /* [26][0][][] */ 54,-113,-25,-17,-96,-4,-15,-13,-102,-114,97,78,-74,-49,5,-19,127,30,-69,-67,12,63,89,8,65,54,19,42,7,26,-86,-5,-26,-62,-93,-99,-65,75,-48,97,-97,91,49,28,-50,76,-21,97, 
  /* [27][0][][] */ 8,12,-70,-109,-124,-77,-76,-22,38,97,34,-110,-28,53,79,-28,88,-19,61,-90,-99,7,-33,-30,-108,46,-90,-8,62,25,-35,-14,83,69,-93,-94,-95,-72,-100,87,-100,14,24,15,98,21,72,127, 
  /* [28][0][][] */ 76,-7,83,44,-116,-77,-102,-73,-39,-117,41,61,-89,-83,-1,93,75,104,-78,70,-31,19,-104,-71,-127,66,-89,-74,-75,-87,-10,-23,-106,17,73,70,13,-106,-46,13,91,31,-88,41,-120,-17,-3,43, 
  /* [29][0][][] */ 66,63,67,-43,-73,23,-117,16,100,-11,-78,-76,127,-97,-38,-41,-77,120,41,-55,-60,-18,71,13,-21,26,-20,-23,-92,1,124,11,75,7,-62,-42,6,114,7,119,66,118,-35,98,12,114,-30,-6, 
  /* [30][0][][] */ 24,-68,-69,37,-108,20,-72,-19,116,-22,-5,-49,-108,13,58,13,0,33,92,-112,38,-110,-123,10,-122,31,-64,118,-18,-120,-102,1,-81,-73,-127,-62,11,-22,4,24,90,-82,-17,100,106,-51,115,74, 
  /* [31][0][][] */ 81,-98,31,94,44,58,-66,-102,-35,-25,-85,-92,96,-127,-53,105,-40,-92,34,43,59,31,-35,100,45,-120,47,33,-78,-75,42,103,25,15,-95,-13,91,-37,-72,-118,54,-75,-36,30,7,-57,-32,25, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021216280292719603, 0.0023542423732578754, 0.0023077572695910931, 0.0022682894486933947, 0.0020832177251577377, 0.0021434067748486996, 0.0022976216860115528, 0.0023535096552222967, 0.0022029145620763302, 0.0024317421484738588, 0.0023620026186108589, 0.0023494327906519175, 0.0023069893941283226, 0.0024921828880906105, 0.0023736399598419666, 0.0021839425899088383, 0.0023295076098293066, 0.0023357165046036243, 0.0020979172550141811, 0.0021959557197988033, 0.0021005659364163876, 0.0022502096835523844, 0.0023320752661675215, 0.0020381808280944824, 0.0023313676938414574, 0.0023665004409849644, 0.002474743640050292, 0.0022398838773369789, 0.0024023025762289762, 0.0022792250383645296, 0.002184796379879117, 0.0023193047381937504, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 2870, -2332, 6432, 3033, 4975, -30, 3657, 5046, -3286, -2333, -1182, 13818, 4690, 5319, 7117, -7575, -4673, 11788, 2782, 7089, 5063, 34109, 22399, 1114, -1778, 2211, -1135, -1198, 3281, 2099, 7620, 7695, -1717, 555, 12609, 5441, 11611, 3002, 2013, -2168, 5014, -2808, 13349, -568, 242, 2419, -2664, 6747, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.0001279182470170781, 0.00015586191148031503, 0.00011395194451324642, 0.00018662997172214091, 0.00010599071538308635, 0.00016535137547180057, 9.800760744838044e-05, 0.0001459881168557331, 0.00012978960876353085, 0.00015556493599433452, 0.0002531105128582567, 5.7044835557462648e-05, 0.000141912154504098, 0.00010693894728319719, 0.00012583914212882519, 7.664135773666203e-05, 0.00011976248788414523, 8.105456072371453e-05, 0.00021520817244891077, 0.00011204958718735725, 0.00015729480946902186, 3.1285500881494954e-05, 4.4746942876372486e-05, 0.00016981159569695592, 0.000227044612984173, 0.00011184145114384592, 0.00011709240061463788, 0.0001598993840161711, 0.00013820613094139844, 0.00020632091036532074, 8.9661705715116113e-05, 0.00011285668006166816, 0.00012075758422724903, 0.00020415570179466158, 7.0383808633778244e-05, 0.00011362379882484674, 7.2092108894139528e-05, 0.00020137100364081562, 0.00017651263624429703, 0.00016452437557745725, 0.00011133150837849826, 0.00016324871103279293, 6.6020111262332648e-05, 0.00022322931909002364, 0.00026029080618172884, 0.00021506125631276518, 0.00016821020108181983, 0.00010756777919596061, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -8,17,127,-14,-8,52,0,-92, 
  /* [1][0][][] */ 91,-67,68,-82,-13,-67,127,28, 
  /* [2][0][][] */ 62,59,80,-78,-66,28,127,-21, 
  /* [3][0][][] */ 6,28,0,-19,14,-58,127,2, 
  /* [4][0][][] */ 127,-40,-64,-34,-101,-68,-21,71, 
  /* [5][0][][] */ 23,68,127,-6,26,-39,24,-44, 
  /* [6][0][][] */ 121,113,-23,127,-88,29,27,95, 
  /* [7][0][][] */ -30,-8,-1,35,34,-120,-127,-36, 
  /* [8][0][][] */ 124,78,-51,86,-68,24,-127,-51, 
  /* [9][0][][] */ 127,-27,-35,44,6,-37,19,-88, 
  /* [10][0][][] */ 75,26,-8,16,-30,127,40,9, 
  /* [11][0][][] */ 127,-19,-16,-122,89,-70,-49,82, 
  /* [12][0][][] */ -53,111,71,-34,8,61,-82,127, 
  /* [13][0][][] */ 127,-7,-88,6,33,-78,25,-98, 
  /* [14][0][][] */ 104,34,-5,-15,-127,25,-73,-14, 
  /* [15][0][][] */ 14,6,-105,-38,-127,-59,112,110, 
  /* [16][0][][] */ 3,-49,115,0,127,-50,-67,-40, 
  /* [17][0][][] */ 18,-21,85,-14,127,-53,-71,1, 
  /* [18][0][][] */ 101,-44,127,43,-25,32,-41,1, 
  /* [19][0][][] */ 75,54,51,-63,-47,-127,25,-43, 
  /* [20][0][][] */ 42,-35,53,127,6,-68,-72,82, 
  /* [21][0][][] */ 96,-10,-76,-127,57,-62,7,107, 
  /* [22][0][][] */ -37,-125,-72,-55,48,-41,127,-74, 
  /* [23][0][][] */ -15,17,32,-45,-103,-127,3,-27, 
  /* [24][0][][] */ 127,3,66,48,-7,-25,-105,80, 
  /* [25][0][][] */ 102,55,-9,-76,-13,-5,-34,127, 
  /* [26][0][][] */ -89,-31,26,-127,104,-1,-41,-86, 
  /* [27][0][][] */ 102,127,-12,-47,6,55,31,3, 
  /* [28][0][][] */ 27,127,-12,16,-4,-56,-3,105, 
  /* [29][0][][] */ 127,31,91,119,43,-46,-118,52, 
  /* [30][0][][] */ 127,-100,-82,108,46,1,-66,91, 
  /* [31][0][][] */ 91,-84,27,48,-79,-101,-127,59, 
  /* [32][0][][] */ -85,-71,27,-127,79,-14,-36,-75, 
  /* [33][0][][] */ 27,8,22,29,25,-68,127,35, 
  /* [34][0][][] */ -67,69,119,-76,127,-72,-85,95, 
  /* [35][0][][] */ -62,27,12,124,-8,127,45,-27, 
  /* [36][0][][] */ 86,27,-29,-127,45,-6,21,47, 
  /* [37][0][][] */ 43,48,-16,10,-77,127,65,41, 
  /* [38][0][][] */ -20,-68,22,106,17,52,4,127, 
  /* [39][0][][] */ 17,2,-127,41,-8,-37,-26,63, 
  /* [40][0][][] */ 54,10,-82,-1,-42,54,-56,127, 
  /* [41][0][][] */ 41,6,13,-44,-113,-127,-10,-4, 
  /* [42][0][][] */ -81,58,-84,106,-8,92,-32,-127, 
  /* [43][0][][] */ -10,-3,-24,-127,-17,10,-13,-71, 
  /* [44][0][][] */ 59,19,27,61,28,127,-52,38, 
  /* [45][0][][] */ -1,72,-22,15,127,-30,-75,-8, 
  /* [46][0][][] */ 67,-76,0,127,75,28,-47,86, 
  /* [47][0][][] */ -16,-86,48,-17,127,19,43,24, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0021382668055593967, 0.0026053697802126408, 0.0019048076355829835, 0.0031196852214634418, 0.0017717286245897412, 0.0027639947365969419, 0.0016382839530706406, 0.002440320560708642, 0.0021695483010262251, 0.0026004055980592966, 0.0042309663258492947, 0.00095355493249371648, 0.0023721873294562101, 0.0017875791527330875, 0.0021035126410424709, 0.001281128148548305, 0.0020019360817968845, 0.0013548987917602062, 0.0035973952617496252, 0.0018730080919340253, 0.0026293219998478889, 0.00052296486683189869, 0.00074798479909077287, 0.0028385510668158531, 0.0037952517159283161, 0.0018695289036259055, 0.0019573031459003687, 0.002672859700396657, 0.0023102378472685814, 0.0034488367382436991, 0.0014987747417762876, 0.0018864993471652269, 0.0020185699686408043, 0.003412643214687705, 0.001176527701318264, 0.001899322378449142, 0.0012050834484398365, 0.0033660945482552052, 0.0029505649581551552, 0.0027501706499606371, 0.0018610047409310937, 0.0027288468554615974, 0.0011035846546292305, 0.0037314756773412228, 0.0043509914539754391, 0.0035949393641203642, 0.0028117825277149677, 0.001798090641386807, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -15107, -3969, 246, -14368, 3725, -2778, 17500, 14334, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00011317241296637803, 0.00013798740110360086, 6.0327012761263177e-05, 9.2872127424925566e-05, 4.96454413223546e-05, 0.00011291950067970902, 6.7232358560431749e-05, 9.9727258202619851e-05, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-27,25,-30,28,59,12,35,107,-87,54,6,-45,69,16,-46,16,-31,-21,-14,11,-62,7,-23,-53,-34,-36,-36,-30,74,-27,40,23,-43,10,-34,61,-68,-52,6,24,-20,-72,-6,63,-32,55,-41, 
  /* [1][0][][] */ 44,-3,-8,58,53,59,22,29,62,-81,-5,1,40,18,-38,-14,-32,-43,-63,-2,3,-45,43,72,-1,-59,-2,36,-23,50,-48,127,-23,41,-24,-25,-58,-15,-6,-22,-48,-16,-35,36,23,-8,6,-84, 
  /* [2][0][][] */ -36,-22,-88,32,-89,-37,-16,53,-104,-84,-87,-29,-40,46,-127,-2,71,-84,29,-24,127,88,-31,5,49,94,13,-103,-47,5,69,1,-24,45,78,-71,67,-2,85,95,-42,104,43,-5,-88,76,-44,76, 
  /* [3][0][][] */ -2,-21,-8,38,-27,6,-12,44,76,92,-127,-31,20,-20,-23,78,-56,-17,-8,45,-19,6,69,17,10,14,-50,50,-32,21,-34,-30,13,30,29,17,53,-4,42,0,-56,81,68,17,28,-14,-32,-39, 
  /* [4][0][][] */ -23,-77,15,-52,-2,90,-66,-68,0,-45,80,42,-61,-22,-12,25,66,17,-33,42,-80,-31,124,-15,-100,-22,-9,18,23,-20,-17,58,-54,50,-19,55,-33,43,-8,18,-33,39,-39,47,127,62,-10,9, 
  /* [5][0][][] */ -66,-67,57,-127,-22,20,-35,-55,-5,69,-52,68,-77,22,51,12,70,53,67,13,31,3,-11,-65,45,-72,2,-46,-16,-37,37,-79,-10,-40,51,-3,-17,30,40,59,92,12,19,-23,-16,-10,-29,32, 
  /* [6][0][][] */ -67,-67,44,25,-51,-55,8,-69,-101,8,-127,33,18,-41,47,20,-27,14,19,124,-17,-6,74,49,-76,-16,58,17,20,-35,-29,-61,-32,53,60,-93,-46,78,50,-21,-73,58,75,-63,-3,-47,-34,-1, 
  /* [7][0][][] */ 20,-5,14,-11,13,28,-39,-45,-127,-32,94,22,6,-24,26,3,18,40,5,-16,-43,11,-15,-41,37,5,-35,11,-8,-23,-23,-47,-101,-55,-37,3,54,-31,-24,1,53,5,45,-22,20,-44,38,16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.007078362163156271, 0.0086304144933819771, 0.0037731495685875416, 0.0058086821809411049, 0.0031050713732838631, 0.0070625436492264271, 0.0042050438933074474, 0.00623743562027812, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -3282, -38, 13379, 3382, -677, -6428, -3497, 14251, 12408, -3834, -5698, -7089, -2325, 17001, 11144, 535, 9728, -5469, 8649, -1954, 18132, -3505, -2252, -762, 4462, -3014, 211, -3940, 9104, -32551, -4324, 40, -5268, -2583, -1074, -1823, 8419, -5171, 551, -15725, -3371, 6402, -6498, -1250, 3402, -1762, 7540, -3514, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0001606737932888791, 0.00012038052955176681, 8.0227560829371214e-05, 8.2017402746714652e-05, 0.00013742769078817219, 9.6397568995598704e-05, 0.00018022551375906914, 0.00010391217074356973, 9.8011601949110627e-05, 0.00036350029404275119, 0.00018214959709439427, 6.444376049330458e-05, 0.00021740906231570989, 6.8567933340091258e-05, 9.9281030998099595e-05, 0.00015863982844166458, 0.00010940698120975867, 0.00011552268551895395, 8.2411032053641975e-05, 0.00020780554041266441, 8.2289887359365821e-05, 0.00023461542150471359, 0.0001815863506635651, 0.00016065241652540863, 0.00015953883121255785, 0.00040954863652586937, 0.0001802696060622111, 0.00024536935961805284, 9.1505178716033697e-05, 7.264734449563548e-05, 0.00012023628369206563, 0.0001374895655317232, 8.8043292635120451e-05, 0.00020468186994548887, 8.5293933807406574e-05, 0.00012963206972926855, 0.00013720855349674821, 8.8481509010307491e-05, 7.9243080108426511e-05, 8.1094236520584673e-05, 0.00016216466610785574, 0.00012575577420648187, 0.00015761442773509771, 0.00012288293510209769, 0.00010410974209662527, 6.4126841607503593e-05, 0.00015313402400352061, 0.00016814302944112569, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 77,79,-17,60,-6,-7,-45,17,38,-73,33,19,17,-99,-26,32,99,42,-76,1,75,16,-27,-12,69,27,17,1,-72,29,-15,-56,127,11,127,27,-37,20,127,34,-68,76,-103,-61,32,-99,-32,-7, 104,127,-70,94,14,56,-65,-127,50,45,127,45,-11,-17,-17,-5,-61,127,-95,28,63,127,36,-22,24,17,9,127,-127,100,-30,-127,-8,-31,43,82,-83,127,115,44,-122,-68,74,-11,9,26,-127,85, 54,48,-2,36,-1,-9,-30,24,29,-83,34,14,15,-76,-20,-24,89,-11,-39,-14,67,18,-31,49,48,66,12,-1,-11,21,-22,-33,115,17,93,17,-14,20,95,8,-41,70,51,65,38,98,19,-19, 
  /* [0][1][][] */ -21,-45,-127,108,24,58,73,-27,38,38,-45,127,127,1,-27,-74,-28,81,72,-16,-111,18,30,-107,25,47,17,17,-3,105,20,53,82,127,38,36,-86,3,-43,89,89,2,80,-119,14,-107,-7,127, 46,-94,-48,-127,127,18,127,-90,-127,127,4,66,-114,127,127,-17,-127,63,8,127,32,-5,127,-12,-127,127,32,-83,-82,39,-127,105,120,-106,28,127,127,64,-4,127,127,-68,-27,-1,121,-67,-1,43, -8,-45,-126,50,-13,127,56,-23,33,36,-38,60,-11,16,-31,-19,-75,80,127,-45,-127,19,-67,127,4,27,20,37,54,88,40,40,19,-6,-52,-108,-41,-16,-10,36,46,67,-19,127,-8,123,-26,78, 
  /* [0][2][][] */ -34,-17,1,26,-9,10,-5,5,32,-37,-2,1,38,-85,-40,32,87,-1,9,8,-56,29,-5,2,22,-6,-8,5,-2,16,41,9,17,15,125,-7,-6,46,75,58,3,75,127,-21,-51,-127,-2,-22, -127,-2,-92,46,-123,5,-61,-10,24,90,-85,49,-16,-31,-24,127,-84,35,-99,-30,-68,30,7,-29,-19,62,-127,-22,-68,127,60,17,44,-23,14,24,-21,51,-53,76,-75,-127,-114,-26,-127,62,-90,90, -27,-20,-1,15,12,-2,-3,2,20,-66,-14,-22,-1,-77,-23,1,91,-38,92,16,-68,2,1,42,15,-13,-11,-3,12,18,36,10,38,12,65,29,3,44,88,15,5,78,-53,59,-32,96,1,-41, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.009723014198243618, 0.0072847078554332256, 0.0048548909835517406, 0.0049632014706730843, 0.0083162998780608177, 0.0058334027417004108, 0.010906167328357697, 0.0062881414778530598, 0.0059310742653906345, 0.021996857598423958, 0.011022601276636124, 0.0038997498340904713, 0.013156292960047722, 0.0041493200697004795, 0.0060078925453126431, 0.0095999306067824364, 0.0066206543706357479, 0.0069907400757074356, 0.004987021442502737, 0.012575144879519939, 0.0049796905368566513, 0.014197518117725849, 0.010988516733050346, 0.0097217205911874771, 0.0096543328836560249, 0.024783426895737648, 0.01090883556753397, 0.014848281629383564, 0.0055373446084558964, 0.0043961815536022186, 0.0072759785689413548, 0.0083200437948107719, 0.005327851977199316, 0.012386118993163109, 0.0051614772528409958, 0.0078445551916956902, 0.0083030387759208679, 0.0053543704561889172, 0.0047953161410987377, 0.0049073370173573494, 0.0098132332786917686, 0.0076099848374724388, 0.0095378803089261055, 0.0074361385777592659, 0.006300097331404686, 0.0038805718068033457, 0.0092667527496814728, 0.010175007395446301, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 38096, 8013, 1661, 1636, 6754, 2815, 7012, 4536, 4650, -7514, 14620, 1375, 12716, 2341, 4594, 2571, 10514, -819, 12745, 279, 3980, -933, 4394, 7539, 2428, -5560, 2647, 14902, 880, 6864, 2989, 14785, 650, 6784, -394, -1625, 3106, 2503, 270, 2027, 14261, -1121, 18108, 5351, 1501, 7026, 5444, -2163, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 2.7732956368708983e-05, 0.0001021089410642162, 0.00016352003149222583, 0.00014670676318928599, 0.00010669647599570453, 0.0001651321945246309, 0.00010947702685371041, 0.00014842598466202617, 0.00010041438508778811, 9.8213968158233911e-05, 6.6077380324713886e-05, 0.00016982929082587361, 6.4434636442456394e-05, 0.00015276830527000129, 0.00014684566122014076, 0.00013533789024222642, 6.8918343458790332e-05, 0.00021611954434774816, 7.2829774580895901e-05, 0.00013727757323067635, 0.00015803839778527617, 0.00011396759509807453, 0.00012885007890872657, 9.3475966423284262e-05, 0.00017196302360389382, 0.00010985858534695581, 0.0001717047271085903, 6.3766521634534001e-05, 0.00021030905190855265, 0.00011711513070622459, 0.00011105339217465371, 6.3647428760305047e-05, 0.00015064864419400692, 0.00012196903117001057, 0.00013684334408026189, 0.00024437185493297875, 0.00018071528756991029, 0.00014597094559576362, 0.00019347759371157736, 0.00016418557788711041, 6.3800463976804167e-05, 0.00016819348093122244, 4.8231395339826122e-05, 8.8158092694357038e-05, 0.0001386806252412498, 0.00011277561861788854, 0.00011370053834980354, 0.00014382215158548206, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,48,-16,-17,65,39,5,-50, 
  /* [1][0][][] */ -9,-54,-33,-16,-49,-127,10,21, 
  /* [2][0][][] */ -70,70,4,-56,-48,47,-69,127, 
  /* [3][0][][] */ 49,37,54,-17,-45,-127,40,-18, 
  /* [4][0][][] */ 14,58,-111,25,-127,90,44,30, 
  /* [5][0][][] */ -30,43,27,-34,-87,-127,-56,-8, 
  /* [6][0][][] */ -45,127,91,-35,-71,-33,23,-42, 
  /* [7][0][][] */ -3,-1,38,59,1,-127,-8,53, 
  /* [8][0][][] */ 127,23,-76,80,-82,-67,-116,-7, 
  /* [9][0][][] */ 96,-37,-70,-67,4,-26,-40,127, 
  /* [10][0][][] */ -94,-1,6,127,9,72,27,-93, 
  /* [11][0][][] */ 24,14,53,-21,8,112,127,97, 
  /* [12][0][][] */ -69,-94,-53,-94,127,-36,-15,34, 
  /* [13][0][][] */ -19,1,-14,50,12,-127,50,62, 
  /* [14][0][][] */ 81,81,106,26,65,-127,-84,-19, 
  /* [15][0][][] */ -38,77,127,63,-18,15,54,-80, 
  /* [16][0][][] */ -95,-47,40,-79,127,14,-48,6, 
  /* [17][0][][] */ 43,-52,-50,-4,-16,127,-24,47, 
  /* [18][0][][] */ -19,127,83,-50,-52,49,75,-94, 
  /* [19][0][][] */ 21,113,86,127,-30,34,34,28, 
  /* [20][0][][] */ 14,4,60,-127,-65,-5,71,-18, 
  /* [21][0][][] */ -108,81,40,-127,112,66,127,16, 
  /* [22][0][][] */ 84,-38,-104,70,52,-51,-65,127, 
  /* [23][0][][] */ 43,-87,-127,-36,71,-9,-68,89, 
  /* [24][0][][] */ 53,-15,-110,26,-67,30,-127,123, 
  /* [25][0][][] */ -9,-17,58,10,127,-12,-81,-47, 
  /* [26][0][][] */ 11,99,127,-29,-26,-13,45,-61, 
  /* [27][0][][] */ -43,31,127,-85,28,14,81,-112, 
  /* [28][0][][] */ 55,-13,98,127,77,-27,30,104, 
  /* [29][0][][] */ 77,77,110,25,-65,28,-127,89, 
  /* [30][0][][] */ 53,-1,-100,67,-127,-39,-45,55, 
  /* [31][0][][] */ 28,127,95,-63,-85,35,121,-121, 
  /* [32][0][][] */ 69,-18,-15,31,109,127,39,-31, 
  /* [33][0][][] */ 21,-35,-127,9,21,-21,-36,69, 
  /* [34][0][][] */ 22,-57,27,-127,-2,81,-17,9, 
  /* [35][0][][] */ -25,21,90,-2,14,-127,0,-19, 
  /* [36][0][][] */ -7,14,-36,-127,-11,11,13,-40, 
  /* [37][0][][] */ 69,-13,-22,-93,-82,127,-59,-77, 
  /* [38][0][][] */ 84,-55,-28,96,58,27,-25,127, 
  /* [39][0][][] */ 127,84,39,72,-5,102,-50,-3, 
  /* [40][0][][] */ 50,-102,-127,-31,16,9,-50,107, 
  /* [41][0][][] */ -7,-55,-127,-98,-7,-76,-36,-16, 
  /* [42][0][][] */ 63,109,88,127,-89,-32,28,45, 
  /* [43][0][][] */ 127,-43,-113,-123,-69,-42,33,72, 
  /* [44][0][][] */ 1,78,105,-72,-99,-13,86,-127, 
  /* [45][0][][] */ 44,24,-127,54,-37,36,16,69, 
  /* [46][0][][] */ 53,-37,-72,-127,21,-27,-30,44, 
  /* [47][0][][] */ 88,-117,127,-61,74,-22,14,15, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00054133794037625194, 0.0019931320566684008, 0.0031918557360768318, 0.002863666508346796, 0.0020826791878789663, 0.0032233246602118015, 0.0021369545720517635, 0.0028972250875085592, 0.0019600549712777138, 0.0019171035382896662, 0.0012898081913590431, 0.0033150103408843279, 0.0012577424058690667, 0.0029819856863468885, 0.0028663778211921453, 0.0026417500339448452, 0.0013452628627419472, 0.0042185806669294834, 0.0014216126874089241, 0.0026796120218932629, 0.0030848563183099031, 0.0022246090229600668, 0.0025151099544018507, 0.0018246193649247289, 0.0033566602505743504, 0.0021444025915116072, 0.0033516183029860258, 0.0012447009794414043, 0.0041051618754863739, 0.0022860479075461626, 0.002167724771425128, 0.0012423763982951641, 0.0029406107496470213, 0.0023807943798601627, 0.0026711360551416874, 0.0047700563445687294, 0.0035275015980005264, 0.0028493036516010761, 0.0037766173481941223, 0.0032048469875007868, 0.0012453634990379214, 0.0032830799464136362, 0.00094146054470911622, 0.0017208162462338805, 0.0027069989591836929, 0.0022013420239090919, 0.0022193961776793003, 0.0028073599096387625, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -14359, -40766, 1448, 9311, -20092, 699, -30391, 83, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00016020817565731704, 5.4313870350597426e-05, 5.0022703362628818e-05, 5.894498826819472e-05, 6.0357117035891861e-05, 6.9085472205188125e-05, 4.5104159653419629e-05, 8.1247257185168564e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 47,51,-81,51,15,20,-93,-31,9,-24,-2,-39,-19,-1,47,3,46,-18,45,-24,19,-34,41,-2,11,-24,-18,21,-16,-4,-21,-1,50,23,18,11,127,57,30,-28,0,-22,-4,-25,77,27,20,-51, 
  /* [1][0][][] */ 66,28,12,-9,33,84,-16,-27,36,63,-35,-76,109,-21,18,47,21,37,23,-87,127,-26,36,52,41,25,46,25,32,-69,62,71,63,106,10,111,65,27,27,23,86,16,39,32,21,43,112,-72, 
  /* [2][0][][] */ -22,10,81,127,-51,24,4,63,30,71,29,-81,-37,118,21,44,-84,-100,85,4,-2,66,-61,-81,-30,-38,22,-10,-111,18,6,-7,-39,-28,-85,-43,19,26,-91,-17,-22,-53,-36,23,74,-74,-25,30, 
  /* [3][0][][] */ -30,56,-78,-14,21,-85,8,70,112,-88,-41,17,-11,-19,9,63,22,11,-15,-30,-9,19,-84,38,-27,-29,43,-13,69,-36,41,-60,34,-20,-25,-55,-127,-3,-87,19,-23,-64,38,0,-54,17,-14,-40, 
  /* [4][0][][] */ 50,-23,30,-17,-62,66,32,69,-127,-48,55,42,77,-53,-69,-59,86,63,67,-34,12,-94,-15,46,-26,2,-55,-127,-56,-52,86,35,79,6,113,87,67,70,50,37,9,38,-54,-34,91,73,87,-46, 
  /* [5][0][][] */ 36,80,19,91,26,28,-48,-95,-101,27,-18,3,22,60,38,-73,72,109,-22,35,-13,-65,-18,-69,-103,-79,-39,56,-1,43,-30,43,-6,-79,68,8,-37,127,-36,-109,-13,-40,-14,-40,-2,-18,-43,99, 
  /* [6][0][][] */ 119,57,4,127,-89,26,14,63,25,-94,73,94,81,-43,-33,-58,67,26,-81,29,81,-30,-28,-8,4,71,-39,-42,16,-45,67,55,23,-47,-1,90,105,-89,5,4,-90,74,-105,59,56,105,102,-56, 
  /* [7][0][][] */ 20,17,127,39,-32,57,-89,8,-34,93,-9,-14,41,59,18,-7,-54,-8,-62,4,-10,32,-2,-43,-12,45,52,-9,2,0,16,-15,-88,-17,59,28,88,-5,36,-14,-24,-37,-30,-52,-3,-31,8,23, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0081732738763093948, 0.0027709079440683126, 0.0025519873015582561, 0.0030071719083935022, 0.0030792139004915953, 0.0035245048347860575, 0.0023010601289570332, 0.0041449572890996933, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 15960, -20532, -826, 2928, -667, 12601, 6202, -1788, -10951, 2732, -2800, -2123, -8833, -13408, 6218, -96, -9721, 33213, -3143, -15353, 14501, -223, -432, 203, -494, -1897, -5549, -2772, -1386, 3413, -346, 22362, 17114, -1604, 6471, 18711, -2702, 19694, 2066, 861, -4261, -9272, -2473, 1329, 4111, 35174, 14061, -7102, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 8.5939675045665354e-05, 6.664636021014303e-05, 0.001079825684428215, 0.00020093969942536205, 0.00016106208204291761, 0.00013447413221001625, 9.0014254965353757e-05, 0.00029852840816602111, 0.00010062949149869382, 0.00027354562189429998, 0.00016826714272610843, 0.0001248685730388388, 0.00014302534691523761, 8.5743820818606764e-05, 0.00013178212975617498, 8.4415980381891131e-05, 7.8967175795696676e-05, 5.5379005061695352e-05, 0.00030844786670058966, 4.80556336697191e-05, 9.8206874099560082e-05, 0.00028340474818833172, 0.00018785666907206178, 0.00014426629059016705, 0.0002099120756611228, 0.00016601344395894557, 0.00015836275997571647, 0.00021331501193344593, 0.00019914111180696636, 0.00013123317330610007, 0.00011308058310532942, 9.5580850029364228e-05, 9.6122639661189169e-05, 0.00017143064178526402, 8.4688188508152962e-05, 9.8383243312127888e-05, 0.0004459595656953752, 0.00011678379087243229, 8.349867130164057e-05, 0.00024582902551628649, 7.3173388955183327e-05, 0.00012103708286304027, 0.00018039066344499588, 0.00012921296001877636, 0.00013155558553989977, 4.2819905502256006e-05, 0.00011620814620982856, 0.00014363045920617878, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -71,9,33,9,127,-47,20,9,9,30,69,-12,13,12,-63,18,86,-27,-18,65,-36,5,-49,-11,-14,-1,36,-37,-23,127,38,-81,-41,101,113,-63,10,-55,-127,-31,6,-15,-11,-70,0,-66,-119,36, -78,92,0,31,-8,-74,111,-19,73,14,98,127,64,127,-21,33,117,-75,7,107,-44,-26,97,-113,-1,47,-94,23,-25,-96,127,-127,-127,-82,4,-32,-58,-40,-110,17,-65,-22,20,-127,28,-107,21,61, -27,2,9,-3,45,-45,17,-3,23,23,12,-40,-11,-6,-66,30,61,-23,-14,81,-20,-5,-59,0,20,5,32,-94,-34,46,-43,-78,14,0,99,-50,14,-44,-93,7,18,4,1,-53,-12,-90,-127,-15, 
  /* [0][1][][] */ -127,127,-8,-62,11,-90,12,-10,35,18,64,43,74,90,-57,40,127,-127,13,102,-19,-59,-94,-38,-127,-3,-25,18,-11,-2,69,-75,-61,127,-114,-66,35,-75,38,57,-114,26,-71,60,-16,-127,16,-37, 13,106,127,127,-38,91,-127,127,127,-127,-93,68,127,104,127,-97,-51,-101,127,6,-127,127,127,0,87,122,74,127,127,-84,121,5,-75,-99,-32,-127,127,127,96,57,-62,127,-20,80,127,64,-1,-123, -66,72,-29,-48,-57,-123,16,-25,0,5,127,31,27,78,-56,127,114,-120,-6,127,52,-88,-98,-31,21,-10,-21,21,-6,12,73,-56,-15,-20,-127,-55,23,-90,40,-127,-85,37,127,72,-33,-102,-13,127, 
  /* [0][2][][] */ -35,-9,6,-12,33,-35,22,3,41,28,122,28,11,-16,-27,101,91,-56,-52,-4,-18,6,-53,46,-10,-7,-26,-18,9,61,-10,-10,-18,42,-80,27,-36,-48,61,-39,78,-10,-4,-5,-23,-19,10,-25, -83,112,8,17,-81,-127,78,-74,70,22,58,-50,-43,16,-42,107,82,-7,-9,123,-60,13,81,127,18,-127,127,10,18,-51,-53,-109,8,-43,-75,-96,-62,-70,31,33,127,53,-32,33,-25,-100,-105,-1, 27,-18,20,-7,-9,-32,16,11,43,24,117,16,29,-12,-28,66,66,-49,-56,19,-20,-7,-56,46,14,-10,-22,-53,3,-7,-18,-2,-8,10,-33,43,-29,-44,62,1,43,-2,38,-3,-27,-81,23,37, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0051679005846381187, 0.0040077157318592072, 0.064934290945529938, 0.012083318084478378, 0.0096853151917457581, 0.0080864746123552322, 0.0054129217751324177, 0.01795172318816185, 0.0060512591153383255, 0.016449406743049622, 0.010118585079908371, 0.0075088529847562313, 0.0086006931960582733, 0.0051561230793595314, 0.0079245930537581444, 0.0050762747414410114, 0.0047486163675785065, 0.0033301638904958963, 0.01854822039604187, 0.0028897798620164394, 0.0059055769816040993, 0.01704227551817894, 0.011296582408249378, 0.0086753163486719131, 0.012622863054275513, 0.0099830608814954758, 0.0095229940488934517, 0.012827496044337749, 0.011975161731243134, 0.0078915823251008987, 0.0067999935708940029, 0.005747663788497448, 0.0057802437804639339, 0.010308818891644478, 0.0050926436670124531, 0.0059161828830838203, 0.026817355304956436, 0.0070226825773715973, 0.0050211134366691113, 0.014782695099711418, 0.0044002123177051544, 0.0072784502990543842, 0.010847621597349644, 0.0077700982801616192, 0.0079109705984592438, 0.0025749343913048506, 0.0069880667142570019, 0.0086370809003710747, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 613, 7907, -9869, 5227, 4165, 6739, 3347, 13778, 11432, 9222, -3060, -303, 1485, 4668, 3763, -666, 29, 6763, 11889, 541, 2811, 12293, 3857, 8042, 19121, 7647, 2777, 13281, 3045, 7062, -3430, 10354, 1754, 9177, 10125, 7017, 68632, 13266, 5920, 16464, 4267, 876, 5804, 2208, 4080, 2487, 2562, 3848, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0002735675370786339, 0.00010021161142503843, 7.7170683653093874e-05, 0.00011850578448502347, 0.00011302321217954159, 9.4678769528400153e-05, 0.00013802119065076113, 6.644739187322557e-05, 7.9395322245545685e-05, 7.8921664680819958e-05, 0.00011974688823102042, 0.00014783353253733367, 0.00016204759594984353, 0.00013253735960461199, 0.00013553210010286421, 9.9814875284209847e-05, 0.00017788134573493153, 0.00010779067088151351, 7.7510194387286901e-05, 0.00017572721117176116, 0.00016294741362798959, 6.8909736000932753e-05, 0.00013789231888949871, 8.9235116320196539e-05, 4.8151148803299293e-05, 0.00011423385876696557, 9.2033173132222146e-05, 6.7187218519393355e-05, 7.6047486800234765e-05, 0.00010910903074545786, 0.00013655467773787677, 7.584824925288558e-05, 0.000206975411856547, 8.1979422247968614e-05, 6.8982611992396414e-05, 0.0001084842297132127, 2.2299618649412878e-05, 7.028066465863958e-05, 0.00010057163308374584, 6.052323806216009e-05, 9.3582370027434081e-05, 0.00020216801203787327, 0.0001150137250078842, 0.00010546181874815375, 0.00015011764480732381, 0.00010862245835596696, 0.00015434701344929636, 8.7783817434683442e-05, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -82,-127,-29,28,-30,-7,46,-45, 
  /* [1][0][][] */ -8,127,40,-88,2,-92,-68,94, 
  /* [2][0][][] */ -127,-63,39,12,66,5,32,-14, 
  /* [3][0][][] */ 4,-35,-127,-59,30,-53,-30,54, 
  /* [4][0][][] */ -66,-123,110,-24,127,-60,57,11, 
  /* [5][0][][] */ -18,67,51,-101,111,37,-55,127, 
  /* [6][0][][] */ -119,99,47,75,-57,-3,48,-127, 
  /* [7][0][][] */ 40,-19,64,29,53,-127,-9,110, 
  /* [8][0][][] */ -1,69,-16,-34,18,107,127,-75, 
  /* [9][0][][] */ 80,124,10,-77,-77,-68,-63,127, 
  /* [10][0][][] */ 33,-6,27,3,-24,35,-127,-80, 
  /* [11][0][][] */ -74,17,-114,-78,127,23,35,60, 
  /* [12][0][][] */ 88,40,-26,-4,127,95,10,2, 
  /* [13][0][][] */ -127,-118,-6,58,-105,43,74,13, 
  /* [14][0][][] */ -8,111,-98,127,-66,127,-9,33, 
  /* [15][0][][] */ -10,-74,-31,-82,127,67,-27,54, 
  /* [16][0][][] */ 66,-85,3,42,39,-16,33,-127, 
  /* [17][0][][] */ -79,-80,-127,101,4,95,76,-104, 
  /* [18][0][][] */ 90,-5,127,17,-41,-127,-78,-36, 
  /* [19][0][][] */ -27,127,30,32,101,-117,-69,-35, 
  /* [20][0][][] */ -76,-18,-127,-40,38,-9,-6,0, 
  /* [21][0][][] */ -127,-26,50,54,-85,-108,107,-39, 
  /* [22][0][][] */ 56,-8,-127,-63,-30,-5,-10,46, 
  /* [23][0][][] */ -36,33,127,-23,-96,43,-12,-109, 
  /* [24][0][][] */ -78,91,71,109,127,84,3,-44, 
  /* [25][0][][] */ -48,-127,-76,33,-73,36,58,-7, 
  /* [26][0][][] */ 110,116,-127,-67,-122,-20,-64,41, 
  /* [27][0][][] */ 58,57,-66,21,-127,17,-26,-12, 
  /* [28][0][][] */ -26,66,20,-79,77,90,-127,-120, 
  /* [29][0][][] */ 46,-7,-6,-69,-127,2,21,-53, 
  /* [30][0][][] */ -91,0,41,127,50,25,-42,-22, 
  /* [31][0][][] */ 11,-120,-5,-82,-127,60,-62,-116, 
  /* [32][0][][] */ -127,-1,31,-9,10,-31,1,22, 
  /* [33][0][][] */ 47,-73,-127,-126,-1,20,-65,7, 
  /* [34][0][][] */ 51,89,127,-2,-120,-59,70,-68, 
  /* [35][0][][] */ 111,33,20,15,-114,-47,-127,-49, 
  /* [36][0][][] */ 127,9,69,-41,3,-23,74,75, 
  /* [37][0][][] */ 127,114,-13,-4,75,80,-117,30, 
  /* [38][0][][] */ -32,91,96,127,-32,60,38,-79, 
  /* [39][0][][] */ 29,54,127,-38,87,-55,-41,10, 
  /* [40][0][][] */ 72,48,43,6,-78,-127,22,-48, 
  /* [41][0][][] */ 30,-48,20,127,-26,71,4,78, 
  /* [42][0][][] */ -20,-113,78,-51,127,-29,100,26, 
  /* [43][0][][] */ -15,-37,-94,-40,112,48,-78,127, 
  /* [44][0][][] */ 102,-18,127,-4,0,28,-46,9, 
  /* [45][0][][] */ -34,28,35,-24,-95,-127,-12,107, 
  /* [46][0][][] */ -66,84,81,41,-10,-29,52,-127, 
  /* [47][0][][] */ 47,-6,12,127,-6,-107,65,47, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0068155606277287006, 0.0024966350756585598, 0.0019226019503548741, 0.0029524094425141811, 0.0028158186469227076, 0.0023587918840348721, 0.0034386089537292719, 0.0016554457833990455, 0.001978025771677494, 0.001966225216165185, 0.0029833298176527023, 0.0036830699536949396, 0.0040371939539909363, 0.003301986726000905, 0.0033765968400985003, 0.0024867509491741657, 0.0044316700659692287, 0.0026854570023715496, 0.0019310603383928537, 0.0043780030682682991, 0.0040596118196845055, 0.0017167916521430016, 0.0034353984519839287, 0.0022231708280742168, 0.0011996199609711766, 0.0028459802269935608, 0.0022928805556148291, 0.0016738775884732604, 0.0018946189666166902, 0.0027183021884411573, 0.0034020727034658194, 0.0018896553665399551, 0.0051565091125667095, 0.0020424050744622946, 0.0017186072655022144, 0.0027027360629290342, 0.0005555644747801125, 0.0017509466269984841, 0.0025056046433746815, 0.0015078536234796047, 0.0023314766585826874, 0.0050367391668260098, 0.0028654094785451889, 0.0026274367701262236, 0.0037399756256490946, 0.0027061798609793186, 0.0038453445304185152, 0.0021870136260986328, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 3216, -2182, 14671, -8083, -12268, -14503, -7501, -1594, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 9.9163975392002612e-05, 0.00015330640599131584, 0.00011236395221203566, 0.0001205370354000479, 0.00015683125820942223, 9.7169235232286155e-05, 0.00024300767108798027, 0.00019754371896851808, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -19,-27,46,-50,55,91,68,98,116,-51,-23,57,-26,-18,17,-15,48,46,15,-51,-27,19,-86,-42,29,-13,20,-77,-38,30,41,28,29,45,62,14,127,-52,-82,8,-60,-73,-35,-4,-71,-91,-126,62, 
  /* [1][0][][] */ -10,1,-37,50,1,14,-41,-14,-53,22,15,82,-26,5,-24,127,40,61,11,-29,-40,-23,-64,22,11,-10,-15,-82,44,-8,-54,-62,63,-33,-34,-54,34,33,49,-39,6,65,46,-41,0,-36,-49,-19, 
  /* [2][0][][] */ 4,-73,-27,-6,-32,15,5,9,111,17,-7,-20,-29,-76,35,6,0,-64,-27,-5,-103,48,8,26,6,45,-40,-25,-19,-40,39,-48,-103,26,-49,54,-70,64,-19,-21,127,-23,-6,38,27,40,-59,-39, 
  /* [3][0][][] */ -29,-114,97,58,25,-104,-21,-10,-127,125,58,-51,49,7,-22,22,58,37,-27,46,76,86,32,-60,10,84,65,30,-32,-69,12,16,-23,6,50,11,-17,-85,-42,41,-26,-12,22,-66,-82,17,-4,28, 
  /* [4][0][][] */ -12,59,-19,71,31,1,12,-5,-52,75,46,75,3,19,59,11,4,-105,-10,-16,90,-11,-101,62,75,-21,27,28,46,24,-11,-58,-56,127,6,13,56,-22,23,26,-28,43,2,-21,1,-49,-30,16, 
  /* [5][0][][] */ -24,4,-10,-70,-127,33,114,29,14,55,-25,-28,-104,-10,62,-32,-84,37,-54,-81,2,105,-6,38,108,31,-5,12,-27,-16,127,-54,-12,106,73,91,-21,52,88,36,-22,-36,-24,40,-59,53,28,54, 
  /* [6][0][][] */ 3,-22,-11,25,-54,-50,13,4,25,-14,38,5,-52,-26,31,57,3,-56,7,-60,70,-25,1,-28,6,-4,10,36,38,3,10,127,46,-15,-15,20,4,-10,18,15,-1,33,-26,-47,-5,-23,-21,38, 
  /* [7][0][][] */ -28,-18,-46,-3,7,-24,3,12,40,4,21,-3,-9,11,2,1,32,-5,3,-4,-58,9,11,-28,-2,-7,-55,-14,-15,-17,17,31,20,-11,27,12,-19,127,-14,-41,-41,-2,-47,-35,24,63,-71,-11, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0042326939292252064, 0.006543697789311409, 0.0047961189411580563, 0.0051449770107865334, 0.0066941520199179649, 0.0041475510224699974, 0.01037248782813549, 0.0084319142624735832, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -725, 27742, 25677, -855, -308, -12618, 22953, 17891, -12950, -1449, -1060, 16325, 21186, -15359, -12452, -1230, 453, 26910, -835, -431, 47099, 11544, -9412, -5900, 17271, 12173, -2566, -1860, -4241, -326, 30600, 17, -2575, 10388, 11728, 15529, -1526, 42746, -5743, -1308, 26718, -291, -1557, 16197, 1, -882, -8546, 14869, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00025517147150821984, 9.4103743322193623e-05, 0.00011070859181927517, 8.8930166384670883e-05, 5.9133340982953086e-05, 0.00013559260696638376, 0.0001011859712889418, 0.00011685579374898225, 0.00020386288815643638, 6.7576373112387955e-05, 0.00013621900870930403, 8.3372702647466213e-05, 9.6411808044649661e-05, 0.00024238623154815286, 7.1846196078695357e-05, 7.8687036875635386e-05, 6.8240493419580162e-05, 0.0001730383955873549, 0.00052694423357024789, 7.4966708780266345e-05, 5.397305721999146e-05, 7.9125660704448819e-05, 6.8067412939853966e-05, 0.00017147559265140444, 7.2067603468894958e-05, 9.7765827376861125e-05, 0.00016245676670223475, 0.00021606123482342809, 0.00015043638995848596, 0.00027905325987376273, 0.0001331909152213484, 8.3530983829405159e-05, 6.0898779338458553e-05, 9.3262045993469656e-05, 9.11188471945934e-05, 8.9137218310497701e-05, 7.7296426752582192e-05, 8.1347840023227036e-05, 0.00011294479918433353, 0.00010741820005932823, 0.00013201255933381617, 0.00026121523114852607, 6.7519962613005191e-05, 7.7847478678449988e-05, 0.00021888475748710334, 0.00021298947103787214, 0.00017652202222961932, 0.00014747194654773921, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 70,-70,-24,42,84,43,-79,-106,19,48,99,-72,-65,63,90,50,64,-79,57,86,-94,-87,53,94,-63,-21,94,83,97,107,-48,65,53,-78,-95,-63,69,-54,69,17,-81,74,46,-100,71,113,66,-65, 97,-85,-56,65,108,55,-69,-98,27,69,117,-107,-93,88,115,68,65,-97,50,114,-84,-127,78,103,-70,-57,115,94,116,127,-72,81,68,-111,-127,-87,89,-71,80,41,-116,66,53,-115,100,127,72,-85, 43,-40,-40,22,33,0,-33,-48,24,28,19,-37,-85,43,35,28,15,-16,36,18,-7,-87,33,34,-39,-7,53,43,47,39,-26,15,32,-75,-74,-53,24,-25,12,25,-38,31,6,-38,43,32,14,-58, 
  /* [0][1][][] */ 50,-92,-65,87,114,78,-124,-127,87,94,107,-82,-110,90,122,87,116,-101,54,113,-109,-114,80,117,-127,-75,126,102,108,119,-84,108,102,-117,-86,-114,97,-94,113,89,-94,111,89,-117,95,104,42,-93, 49,-127,-127,127,127,127,-127,-118,127,127,127,-127,-127,127,127,127,127,-127,54,127,-127,-116,127,127,-125,-127,127,127,127,113,-127,127,127,-127,-99,-127,127,-127,127,127,-127,127,127,-127,127,113,49,-127, -12,-64,-90,63,45,29,-64,-48,56,41,32,-55,-81,45,51,63,29,-27,31,27,-27,-82,57,70,-86,-19,18,61,64,19,-46,31,51,-115,-77,-61,44,-48,31,50,-25,62,33,-64,41,-6,15,-72, 
  /* [0][2][][] */ -32,-53,-51,42,24,37,-64,-14,-105,52,33,-58,-59,29,58,44,63,-19,-75,61,-45,-58,55,62,-78,-65,72,43,40,-3,-53,40,51,-60,-17,-35,31,-40,43,97,-35,48,78,-72,41,13,-104,-35, -127,-80,-87,69,36,66,-74,-4,-81,61,54,-74,-97,44,59,67,78,-27,-127,75,-61,-105,79,56,-84,-49,44,47,46,0,-77,43,69,-97,-18,-59,39,-55,45,114,-32,58,116,-91,45,-15,-127,-77, -71,-22,-65,40,6,17,-6,10,-96,27,32,-25,-39,20,26,36,20,-4,-58,27,-28,-9,33,31,-49,-4,4,21,21,-10,-31,16,23,-46,-3,-26,13,-11,-4,44,-5,31,39,-26,6,-22,-56,-38, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.011125213466584682, 0.0041028261184692383, 0.0048267804086208344, 0.0038772635161876678, 0.002578152809292078, 0.0059116980992257595, 0.004411604255437851, 0.005094792228192091, 0.0088882120326161385, 0.0029462601523846388, 0.0059390086680650711, 0.003634963883087039, 0.0042034555226564407, 0.010567789897322655, 0.0031324201263487339, 0.0034306736197322607, 0.0029752152040600777, 0.0075442958623170853, 0.022974226623773575, 0.0032684712205082178, 0.0023531697224825621, 0.0034497973974794149, 0.0029676689300686121, 0.0074761593714356422, 0.0031420732848346233, 0.0042624892666935921, 0.0070829475298523903, 0.0094200475141406059, 0.006558871828019619, 0.012166434898972511, 0.0058069867081940174, 0.003641864750534296, 0.0026551240589469671, 0.0040661292150616646, 0.0039726877585053444, 0.0038862908259034157, 0.0033700445201247931, 0.0035466819535940886, 0.0049242768436670303, 0.0046833227388560772, 0.0057556116953492165, 0.011388714425265789, 0.002943800762295723, 0.0033940698485821486, 0.0095431497320532799, 0.0092861214652657509, 0.007696178276091814, 0.0064296252094209194, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -2621, 8679, 5559, -1203, 96, 15166, 6088, 2638, 15922, 2534, -3919, 2300, 5140, 2539, -285, 927, -2130, 10413, -4317, -1166, 1395, 1699, 472, -799, 151, 3560, -2600, -2299, -1175, -3785, 16429, 4452, 794, 1527, 578, 1696, 1835, 11675, 1885, 565, 11789, -3065, 977, 2007, -2336, -3260, 17174, 3849, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00019932826398871839, 9.8102020274382085e-05, 0.00013706268509849906, 0.00018623431969899684, 0.00038681930163875222, 5.8284604165237397e-05, 0.0001448626717319712, 0.00016518560005351901, 6.5655964135657996e-05, 0.00022840879682917148, 0.00012273648462723941, 0.00021689517598133534, 0.00012710290320683271, 0.0001831203990150243, 0.00028896896401420236, 0.0001684806338744238, 0.00017676844436209649, 9.2793467047158629e-05, 0.00010885918891290203, 0.00027590984245762229, 0.00025478895986452699, 0.00017060998652596027, 0.00023662913008593023, 0.00016308345948345959, 0.00022714804799761623, 0.00014672592806164175, 0.00017149199265986681, 0.00012892794620711356, 0.00017958581156563014, 0.00011664984776871279, 6.8493420258164406e-05, 0.00015441457799170166, 0.00025600349181331694, 0.00022013025591149926, 0.00017435387417208403, 0.00021624639339279383, 0.00015454947424586862, 7.7541852078866214e-05, 0.00023875659098848701, 0.00022305181482806802, 8.5688152466900647e-05, 8.5163876065053046e-05, 0.00022361612354870886, 0.00020431898883543909, 0.00022562796948477626, 0.00014752363495063037, 6.2182887631934136e-05, 0.00014041457325220108, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 40,27,-56,11,-38,55,-127,25, 
  /* [1][0][][] */ 7,-65,-121,-2,-12,-26,127,-111, 
  /* [2][0][][] */ -127,-55,-70,-49,-38,52,-125,-5, 
  /* [3][0][][] */ -54,-38,20,-15,-23,-127,-114,-17, 
  /* [4][0][][] */ -42,-127,-43,18,57,19,-39,-44, 
  /* [5][0][][] */ 68,-31,86,54,-127,61,-75,-106, 
  /* [6][0][][] */ 41,-127,-62,-29,-11,62,-41,-87, 
  /* [7][0][][] */ -25,-80,-62,-58,77,-127,3,18, 
  /* [8][0][][] */ 32,62,50,62,33,-55,-8,127, 
  /* [9][0][][] */ -27,-55,-55,8,48,-14,127,-11, 
  /* [10][0][][] */ -27,16,-127,26,25,26,103,-115, 
  /* [11][0][][] */ 4,-33,-34,5,-127,22,7,48, 
  /* [12][0][][] */ 91,59,-23,41,-76,127,75,-6, 
  /* [13][0][][] */ -47,-4,22,-22,44,-127,-6,72, 
  /* [14][0][][] */ -108,-46,6,35,14,72,-127,-124, 
  /* [15][0][][] */ 66,80,52,4,-127,39,111,-49, 
  /* [16][0][][] */ 2,-58,9,73,-14,-63,12,-127, 
  /* [17][0][][] */ -82,127,23,-16,-58,-49,-86,-76, 
  /* [18][0][][] */ 112,127,-84,-103,103,110,-89,-97, 
  /* [19][0][][] */ -33,85,-19,12,-127,5,-74,-102, 
  /* [20][0][][] */ -127,-6,9,14,20,17,104,45, 
  /* [21][0][][] */ -32,-2,56,15,-90,-111,-127,28, 
  /* [22][0][][] */ -6,-37,-46,-4,-127,2,8,56, 
  /* [23][0][][] */ 60,6,-17,-16,127,69,-91,89, 
  /* [24][0][][] */ 127,7,-51,32,-97,2,13,-10, 
  /* [25][0][][] */ 24,-61,65,102,-54,-127,20,114, 
  /* [26][0][][] */ 19,127,5,57,76,-18,17,-13, 
  /* [27][0][][] */ -123,117,59,-15,127,-64,6,93, 
  /* [28][0][][] */ -74,-72,-63,-36,84,-127,18,-13, 
  /* [29][0][][] */ -58,-24,46,41,127,-97,-89,79, 
  /* [30][0][][] */ 127,42,-112,-97,-73,-90,-72,-66, 
  /* [31][0][][] */ 30,0,43,64,-127,9,36,6, 
  /* [32][0][][] */ 127,17,54,38,-37,-54,90,60, 
  /* [33][0][][] */ 127,36,-48,11,-126,-70,25,52, 
  /* [34][0][][] */ 43,-16,-21,25,-49,127,20,-75, 
  /* [35][0][][] */ 127,33,-15,-30,34,-99,29,117, 
  /* [36][0][][] */ -32,-48,76,-103,-33,-19,78,-127, 
  /* [37][0][][] */ 78,-67,60,51,118,-12,35,-127, 
  /* [38][0][][] */ 69,127,13,-29,-26,24,23,80, 
  /* [39][0][][] */ 23,5,-80,75,-24,-59,-74,127, 
  /* [40][0][][] */ -13,-33,0,-31,24,-127,24,40, 
  /* [41][0][][] */ -29,45,-127,-64,97,126,68,-117, 
  /* [42][0][][] */ 31,-44,-38,18,76,127,33,54, 
  /* [43][0][][] */ 3,44,-26,24,-127,-81,54,-56, 
  /* [44][0][][] */ -127,-49,-15,-33,53,53,-106,-71, 
  /* [45][0][][] */ -67,65,-61,21,37,-1,-67,127, 
  /* [46][0][][] */ -18,43,127,7,-60,-52,-43,32, 
  /* [47][0][][] */ -127,-104,-49,-51,98,108,-25,87, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0029210096690803766, 0.0014376131584867835, 0.0020085531286895275, 0.0027291274163872004, 0.0056685535237193108, 0.00085411814507097006, 0.0021228562109172344, 0.0024206738453358412, 0.0009621400386095047, 0.0033471635542809963, 0.0017986132297664881, 0.0031784398015588522, 0.0018625999800860882, 0.0026834951713681221, 0.0042346282862126827, 0.0024689601268619299, 0.0025904120411723852, 0.0013598202494904399, 0.0015952516114339232, 0.0040432563982903957, 0.0037337455432862043, 0.0025001643225550652, 0.00346762640401721, 0.002389868488535285, 0.0033286882098764181, 0.0021501609589904547, 0.0025130894500762224, 0.0018893445376306772, 0.002631698502227664, 0.0017094180220738053, 0.0010037209140136838, 0.0022628323640674353, 0.0037515435833483934, 0.0032258476130664349, 0.0025550283025950193, 0.0031689323950558901, 0.0022648093290627003, 0.001136319013312459, 0.0034988028928637505, 0.0032686607446521521, 0.0012556971050798893, 0.0012480141595005989, 0.0032769304234534502, 0.0029941450338810682, 0.0033064126037061214, 0.0021618506871163845, 0.00091124465689063072, 0.0020576727110892534, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10547, 14099, 4854, 5053, 1757, -13550, 6289, -7656, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00014737938181497157, 0.00012052187958033755, 0.00014920008834451437, 0.00018066519987769425, 0.00012346447329036891, 0.00012651653378270566, 7.7798329584766179e-05, 0.00012777811207342893, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 34,-46,100,69,32,-39,20,12,-1,58,-31,16,-44,-79,39,4,-105,66,-33,68,-45,67,-1,-25,-1,-42,65,-31,-25,23,-31,100,-60,-9,-35,-84,-62,-43,-38,-17,-10,60,-127,8,57,20,28,56, 
  /* [1][0][][] */ -52,-34,60,-7,-29,33,-34,-32,45,-13,-4,-30,-19,12,2,19,2,24,16,-13,-56,-28,-69,-24,25,-39,-32,-35,25,-68,-11,-127,-6,-57,-65,-66,-39,-85,-24,23,39,-19,83,-102,-50,-14,-25,-8, 
  /* [2][0][][] */ -59,89,-7,37,15,11,21,-35,77,-43,69,79,102,13,31,-58,95,4,6,30,-17,16,17,127,-113,-46,8,-24,-5,85,-22,-88,-23,0,1,-77,-21,7,-37,-21,86,-86,26,-6,25,-123,0,-12, 
  /* [3][0][][] */ 61,-21,-61,29,84,-86,-1,-117,-30,-7,-57,-90,-19,127,-12,18,-44,-20,-69,-50,28,78,-12,-53,115,47,52,-68,28,-97,50,-62,57,61,108,-77,-48,16,-31,41,25,87,-76,32,0,28,8,41, 
  /* [4][0][][] */ -49,28,-41,63,88,-28,29,-47,-34,-9,-56,31,-47,-14,2,-60,10,61,-33,-41,-42,35,-67,-65,21,-13,23,-36,32,-36,-31,60,-6,73,-67,-74,-58,-65,-37,1,62,-55,127,20,-2,84,-52,-54, 
  /* [5][0][][] */ 56,8,81,-8,-5,17,51,31,127,-1,70,3,70,55,28,-62,-15,31,33,-43,-51,-67,13,44,23,-9,28,44,-34,-25,18,-18,-19,51,-17,57,46,2,-27,-42,-5,69,32,39,-15,-10,71,5, 
  /* [6][0][][] */ -10,-65,-17,16,40,-8,-3,16,-53,-15,106,61,104,73,-35,54,122,-127,-21,4,-12,-40,-103,37,-81,78,-37,-5,-17,-51,71,-55,97,18,-76,-25,-49,8,55,7,82,-71,-8,-79,-109,47,-42,30, 
  /* [7][0][][] */ -12,-22,-62,-33,21,106,-2,-2,-3,-51,-127,-102,50,56,-63,-49,-36,23,106,25,-15,-78,57,-11,115,-27,-79,91,-45,-11,-24,-87,-47,69,50,118,94,-58,-19,-43,-22,-9,40,-20,-3,-24,6,-53, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0062658260576426983, 0.0051239808090031147, 0.0063432329334318638, 0.0076809707097709179, 0.0052490849047899246, 0.0053788432851433754, 0.003307591425254941, 0.0054324790835380554, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -1691, 1740, 1283, 378, 623, 8044, -49, -3844, -5750, -826, -7160, 564, -4093, -5278, -280, -631, -8221, 15882, -3100, -869, -927, 50, -1764, -13, 19454, 960, -679, -852, 351, 56, -797, -8177, -1152, 12052, 298, 6082, -656, -3143, -433, 335, -3413, -412, 3851, 5659, 616, 7635, -889, -1842, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00038991725887171924, 9.6021212812047452e-05, 0.00048146300832740963, 0.00014641525922343135, 0.00015463956515304744, 0.00029556185472756624, 0.00029179558623582125, 0.00017916258366312832, 0.00029156362870708108, 0.00013617366494145244, 0.00045343869714997709, 0.00022450806864071637, 0.0001373638806398958, 0.00016126889386214316, 0.00019073324801865965, 0.00046780510456301272, 0.00029781769262626767, 9.0140973043162376e-05, 0.00012774404603987932, 0.00040567811811342835, 0.0002358630154049024, 0.00036022864514961839, 0.00016518069605808705, 0.00057899270905181766, 0.00019329447241034359, 0.00028692299383692443, 0.00021679149358533323, 0.00015940885350573808, 0.00018712713790591806, 0.00014454263146035373, 0.00047688893391750753, 0.00046769395703449845, 0.00039968389319255948, 0.00012935724225826561, 0.00039862244739197195, 0.00020944239804521203, 0.00018880271818488836, 9.7742493380792439e-05, 0.00043237171485088766, 0.00071176793426275253, 0.00021049530187156051, 0.0008231335086748004, 0.0005112973740324378, 0.0001736002741381526, 0.00020584966114256531, 0.00011493766214698553, 0.00024488157941959798, 0.00033475583768449724, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -3,-43,38,-32,127,-2,-15,-11,-34,45,-7,6,62,13,127,-36,17,-25,-33,-13,-28,-20,-63,28,-127,48,26,-44,-13,21,-15,-1,-31,33,15,0,83,50,30,-9,67,14,-14,-2,-101,-5,-38,-34, 5,-97,-75,-36,-50,-1,33,23,18,-2,63,127,-18,52,-66,127,-1,-75,41,-48,-74,-127,-83,75,-127,-94,20,112,12,37,127,10,-127,-111,-51,36,127,-87,117,8,54,-11,-23,-11,-56,-11,72,3, 15,-17,-12,127,45,11,-87,1,-28,-43,-22,-20,55,-6,-59,-43,26,13,-5,-11,2,0,-28,17,-51,-69,-27,35,-5,32,-83,-8,16,82,15,20,2,70,-127,-3,27,-3,-9,26,-127,2,-55,47, 
  /* [0][1][][] */ -108,-67,127,-8,-38,-36,77,21,16,98,12,19,53,26,110,31,33,-127,103,43,83,-9,51,-36,-15,-24,36,-47,24,54,39,60,40,-111,2,127,12,41,-42,-116,23,88,-20,-86,27,-84,-59,22, 127,-65,-77,-80,3,-127,127,127,127,17,127,-40,-127,25,-33,-40,127,-107,127,127,127,81,127,-127,5,-30,106,-18,127,127,-119,127,34,-127,127,-97,-64,127,-102,121,-127,-127,127,-127,96,-127,127,-118, -8,-105,15,76,-26,-8,-54,13,-16,-127,-31,54,89,7,-51,46,23,-3,-4,16,-2,-24,45,-21,-3,7,-127,84,-73,13,83,16,-10,-103,-19,-40,65,12,125,8,23,54,-45,5,53,-27,-55,127, 
  /* [0][2][][] */ -2,116,26,-36,77,16,-46,-15,-30,19,-5,-3,58,18,88,7,-21,-3,-6,-42,-16,9,2,13,-28,-20,30,5,-56,-109,-8,0,-2,49,-19,35,-57,43,15,101,12,20,-2,8,19,-5,-15,-36, 4,94,-50,14,29,-29,-3,33,32,13,24,-38,41,127,-73,-75,-4,-26,109,-73,-51,76,1,48,75,127,7,127,-72,-109,-16,0,98,-118,-86,1,-68,-37,-27,-127,49,-20,-56,80,48,15,19,10, 16,127,-13,32,20,13,-66,-1,-22,-17,-4,-9,60,-6,-66,0,-13,0,-35,-24,-10,4,-1,1,-51,29,-42,19,36,-78,20,1,10,65,0,-17,-43,63,13,-1,-25,-3,1,-15,11,1,-1,34, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.016571482643485069, 0.004080901388078928, 0.020462177693843842, 0.0062226485460996628, 0.0065721813589334488, 0.012561378069221973, 0.012401311658322811, 0.007614409551024437, 0.012391453608870506, 0.0057873805053532124, 0.019271144643425941, 0.0095415925607085228, 0.0058379648253321648, 0.0068539278581738472, 0.0081061627715826035, 0.019881715998053551, 0.012657251209020615, 0.0038309912197291851, 0.0054291216656565666, 0.017241319641470909, 0.010024177841842175, 0.015309716574847698, 0.0070201796479523182, 0.024607190862298012, 0.008215014822781086, 0.012194227427244186, 0.0092136384919285774, 0.0067748762667179108, 0.0079529033973813057, 0.0061430614441633224, 0.020267779007554054, 0.019876992329955101, 0.016986565664410591, 0.0054976828396320343, 0.016941454261541367, 0.008901301771402359, 0.008024115115404129, 0.0041540558449923992, 0.01837579719722271, 0.030250135809183121, 0.0089460499584674835, 0.034983173012733459, 0.02173013798892498, 0.0073780114762485027, 0.0087486105039715767, 0.004884850699454546, 0.010407466441392899, 0.014227122999727726, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 5843, 2116, 34246, -2659, -1502, 6996, -868, 1017, 2908, -6, 7886, 555, 2692, 4246, 3218, 4035, 3203, 3311, -942, 4538, 1634, 397, 1324, 12821, 28240, 4985, 4474, -1394, -88, 7390, 8011, 11863, 13299, 4559, 6599, -1285, 502, 2312, 7190, 6206, 681, 13565, 13528, 3557, 7214, 2277, 3596, 579, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00014305996592156589, 0.00025247564190067351, 3.785045919357799e-05, 0.00019563372188713402, 0.00027659360785037279, 0.0001511375157861039, 0.00020330797997303307, 0.00054422102402895689, 0.00022000540047883987, 0.00031936026061885059, 0.00011058554810006171, 0.00031426327768713236, 0.00018995613208971918, 0.00018346311117056757, 0.0001668395270826295, 0.00019768382480833679, 0.00015616243763361126, 0.00016234740905929357, 0.00030547127244062722, 0.00018598069436848164, 0.00022548515698872507, 0.00029349932447075844, 0.00024250130809377879, 7.5675598054658622e-05, 5.5735970818204805e-05, 0.00017056164506357163, 0.00018118071602657437, 0.00027406364097259939, 0.00056689203483983874, 0.00011937683302676305, 0.0001133507103077136, 8.3614992036018521e-05, 7.4935327575076371e-05, 0.00018680556968320161, 0.00013366997882258147, 0.00017924893472809345, 0.00027798011433333158, 0.000181292969500646, 0.00012144750508014113, 0.0001433765864931047, 0.00021243722585495561, 7.4909017712343484e-05, 8.4659412095788866e-05, 0.0002283238572999835, 0.00013111405132804066, 0.00027125768247060478, 0.00020790693815797567, 0.00031223532278090715, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -17,27,16,-127,-88,7,24,114, 
  /* [1][0][][] */ 95,8,-19,-4,-80,49,127,28, 
  /* [2][0][][] */ -4,119,-39,-26,-43,95,-47,-127, 
  /* [3][0][][] */ 71,-74,-93,119,-127,-39,-6,-30, 
  /* [4][0][][] */ 35,-59,47,-18,-127,-3,47,29, 
  /* [5][0][][] */ -18,51,-10,-93,-127,-5,-33,10, 
  /* [6][0][][] */ 55,-15,40,35,123,-22,-9,-127, 
  /* [7][0][][] */ 15,31,23,127,21,-9,-2,21, 
  /* [8][0][][] */ 22,24,17,-48,34,127,10,-28, 
  /* [9][0][][] */ 121,31,-6,19,-71,-49,127,84, 
  /* [10][0][][] */ 4,64,-72,-34,6,127,80,-57, 
  /* [11][0][][] */ -13,-38,-127,103,-61,29,-16,80, 
  /* [12][0][][] */ -102,-86,59,50,27,-127,-45,9, 
  /* [13][0][][] */ 37,34,33,50,-59,127,12,-37, 
  /* [14][0][][] */ 11,-99,5,0,-61,-75,-127,99, 
  /* [15][0][][] */ -89,40,-13,1,102,-2,-127,-49, 
  /* [16][0][][] */ 84,79,-100,-127,57,116,103,38, 
  /* [17][0][][] */ -110,121,-127,41,-14,-26,24,-111, 
  /* [18][0][][] */ 34,-2,-95,127,-12,-36,-38,-63, 
  /* [19][0][][] */ 126,23,16,32,-44,15,127,50, 
  /* [20][0][][] */ 38,-72,-97,127,53,-28,-22,-66, 
  /* [21][0][][] */ 22,49,127,-105,47,-24,26,-99, 
  /* [22][0][][] */ -82,-31,-127,53,-26,36,8,110, 
  /* [23][0][][] */ 81,27,35,44,-127,115,66,-47, 
  /* [24][0][][] */ -10,-2,-127,82,-39,28,42,69, 
  /* [25][0][][] */ 49,-34,-69,127,47,-4,-33,-17, 
  /* [26][0][][] */ -72,19,127,-95,-14,32,59,-10, 
  /* [27][0][][] */ -68,77,127,3,17,-12,73,16, 
  /* [28][0][][] */ -52,-93,37,-127,-20,11,1,-26, 
  /* [29][0][][] */ -71,-76,-21,85,-4,-127,-17,57, 
  /* [30][0][][] */ -127,54,112,-26,44,43,70,26, 
  /* [31][0][][] */ -57,50,86,-127,-43,18,35,60, 
  /* [32][0][][] */ -80,91,105,-118,5,-1,15,127, 
  /* [33][0][][] */ 10,103,-51,50,26,15,-127,-27, 
  /* [34][0][][] */ 97,22,127,-118,-87,-109,54,-53, 
  /* [35][0][][] */ 81,-3,26,102,71,-66,27,-127, 
  /* [36][0][][] */ 20,62,127,-105,22,-28,41,-110, 
  /* [37][0][][] */ -51,-46,101,63,0,-127,92,-10, 
  /* [38][0][][] */ 84,3,78,47,-28,-44,127,16, 
  /* [39][0][][] */ 49,-74,-29,6,-127,10,76,64, 
  /* [40][0][][] */ -32,34,-127,101,-43,51,-80,110, 
  /* [41][0][][] */ -107,-21,-51,-3,127,16,-98,16, 
  /* [42][0][][] */ -86,65,-28,-36,127,35,-108,-54, 
  /* [43][0][][] */ 127,106,-40,121,1,-97,53,71, 
  /* [44][0][][] */ -6,20,93,6,41,-127,21,-26, 
  /* [45][0][][] */ -9,-75,127,78,-33,-19,-121,19, 
  /* [46][0][][] */ 44,-115,-127,56,-81,29,-1,-24, 
  /* [47][0][][] */ -109,-31,49,-2,72,31,-127,-31, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0027079910505563021, 0.0047791269607841969, 0.00071647367440164089, 0.0037031630054116249, 0.005235657561570406, 0.0028608913999050856, 0.0038484293036162853, 0.010301593691110611, 0.0041644959710538387, 0.0060451901517808437, 0.002093280665576458, 0.0059487093240022659, 0.0035956914070993662, 0.0034727845340967178, 0.0031581157818436623, 0.0037419693544507027, 0.0029560085386037827, 0.0030730841681361198, 0.0057822847738862038, 0.0035204400774091482, 0.004268222488462925, 0.005555666983127594, 0.0045903222635388374, 0.0014324680669233203, 0.0010550296865403652, 0.0032285719644278288, 0.0034295811783522367, 0.0051877675577998161, 0.010730735026299953, 0.0022596914786845446, 0.0021456226240843534, 0.0015827533788979053, 0.0014184555038809776, 0.003536054166033864, 0.002530247438699007, 0.0033930141944438219, 0.0052619031630456448, 0.003431705990806222, 0.0022988873533904552, 0.0027139843441545963, 0.0040212376043200493, 0.001417957479134202, 0.0016025232616811991, 0.0043219565413892269, 0.0024818661622703075, 0.0051346537657082081, 0.0039354832842946053, 0.0059103220701217651, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -11882, 2424, -16518, 428, 2614, -3019, 10489, 599, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00018866643949877471, 0.00013599039812106639, 0.00010823128104675561, 7.0505462645087391e-05, 0.00018368831661064178, 0.00013505431707017124, 0.0001320717710768804, 0.00012334922212176025, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 47,103,-42,71,-3,-4,-22,9,61,-61,3,-27,9,10,-34,-52,0,-21,32,13,-54,-31,-36,11,18,13,26,-3,17,10,-20,26,-63,13,109,-127,-23,20,-11,115,-26,13,11,-1,-14,38,25,-44, 
  /* [1][0][][] */ -1,-45,34,53,-14,-16,-18,-22,43,-45,93,43,19,12,-43,-78,127,39,13,13,-69,31,34,-15,-51,-94,-34,-53,-14,-59,40,-42,-11,-24,-33,9,3,-21,83,-51,-14,33,-63,34,76,61,16,46, 
  /* [2][0][][] */ 78,-29,-13,-14,108,110,61,74,-30,-5,1,-33,-7,47,60,30,-24,-33,58,-69,-42,-50,-48,63,-93,-97,118,22,61,-69,-62,18,-127,87,105,18,-9,-3,-5,18,26,68,16,-63,-21,17,57,-46, 
  /* [3][0][][] */ 81,-31,13,-11,121,127,25,51,-35,-25,29,55,-123,45,67,22,6,11,80,-108,-91,17,35,93,11,-34,56,28,48,-57,6,-13,-118,68,-67,-125,26,-39,68,-54,56,-93,-108,-26,-64,46,-17,64, 
  /* [4][0][][] */ 36,42,-27,-41,-10,-12,-20,-18,5,-4,-8,-13,-34,-24,63,54,-39,-17,-33,43,28,-14,-16,5,-49,-39,-7,56,-11,14,-23,28,-32,-17,28,-127,-7,28,14,57,5,-13,-9,-23,43,2,90,-21, 
  /* [5][0][][] */ 71,55,-91,52,6,8,-6,28,-85,-63,-61,-22,37,22,42,27,40,-66,44,127,-73,-48,-57,50,35,-24,-34,69,33,30,-58,3,-1,2,-59,3,-8,17,-24,68,19,81,-4,-44,124,28,18,-62, 
  /* [6][0][][] */ -29,-74,17,-43,-43,-37,-78,-77,-37,-62,-116,42,-54,-48,94,88,-127,9,23,-22,19,57,68,14,-11,-11,-69,84,-83,-40,44,76,17,-55,87,39,25,41,-13,-85,-11,-59,-30,18,-42,-17,-12,63, 
  /* [7][0][][] */ 76,17,-18,43,14,15,10,2,79,-7,-16,-18,57,7,-14,-19,-50,-6,-28,-2,0,-19,-21,-25,69,-127,17,0,0,93,-17,18,-73,21,-58,-44,-15,24,27,23,26,66,-33,-18,-43,31,42,-26, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0080183232203125954, 0.0057795918546617031, 0.0045998292043805122, 0.0029964821878820658, 0.0078067532740533352, 0.0057398080825805664, 0.0056130499579012394, 0.0052423421293497086, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 620, 6887, -289, -660, 78, 139, 6763, 7683, 1969, -4807, 22, 20, 6064, 3888, 19847, 16385, -1705, -2113, 3565, 6546, 15433, -428, -430, -395, 5781, 968, 3853, 18630, 7013, 11852, -11, 2706, -1264, -3424, -120, 792, -129, 536, 567, 3255, 3977, 3958, -4947, 890, -2704, 141, 9910, -274, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00012213939044158906, 0.00013323863095138222, 0.00055296928621828556, 7.7486678492277861e-05, 0.00047902969527058303, 0.00058930838713422418, 0.00015474396059289575, 0.00019995303591713309, 6.4246887632180005e-05, 0.00028553965967148542, 0.00063471088651567698, 0.00038486576522700489, 0.00025683362036943436, 0.00017377307813148946, 6.0979975387454033e-05, 6.0964706790400669e-05, 0.0001577631919644773, 0.00053323741303756833, 6.5303094743285328e-05, 0.00011172777885803953, 6.4576459408272058e-05, 0.0010748379863798618, 0.0015771890757605433, 0.00033750568400137126, 4.9324531573802233e-05, 0.00021855240629520267, 0.00010392806143499911, 0.00015356449875980616, 0.00017044850392267108, 0.00014584310702048242, 0.00052710459567606449, 0.00022981839720159769, 0.00013088874402455986, 0.00027164595667272806, 6.8425673816818744e-05, 0.00010868848039535806, 0.00037647364661097527, 0.00041338082519359887, 0.00010999154619639739, 0.00016987739945761859, 8.2571030361577868e-05, 0.00024284559185616672, 0.00010386591748101637, 0.00040120072662830353, 7.4158997449558228e-05, 0.00040690856985747814, 9.0713168901856989e-05, 0.00084573723142966628, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -18,-88,-104,85,-86,5,-89,-76,51,80,91,-42,0,8,-85,-58,86,-81,32,-47,-18,-106,-40,-79,88,95,4,-122,0,-51,60,81,49,66,68,15,89,88,25,15,-123,-11,21,42,-41,31,-38,-96, 89,-5,35,87,-127,44,-59,6,92,110,100,68,-13,-69,-127,-95,114,-34,98,-80,-110,127,127,32,127,91,47,-119,-85,-61,-107,119,96,127,101,102,-18,92,58,-69,-82,-83,7,-58,-57,92,-54,101, 110,-3,64,68,-80,12,-36,-9,20,74,-13,-30,-74,-1,-45,-44,30,84,54,-17,-58,-23,-81,75,39,19,25,-39,-6,-48,27,40,45,93,13,65,-2,31,41,-9,-57,-5,-4,11,-20,77,-16,-1, 
  /* [0][1][][] */ 44,-127,127,101,92,-71,-127,-127,112,92,109,-46,4,-4,-106,-93,90,127,40,-104,-33,112,30,-127,96,121,108,-125,-8,-116,-77,101,108,-5,102,47,30,114,57,3,-12,-22,105,95,-110,61,-101,108, 127,-5,5,127,124,-127,-98,2,127,127,127,62,-31,-127,-112,-127,127,63,127,-127,-127,-122,-110,50,105,127,127,-127,-127,-127,127,127,127,1,127,127,-6,127,127,-127,14,-127,127,-86,-127,127,-117,-127, 99,-6,-127,71,88,-60,-42,-10,25,77,14,-17,-127,-4,-25,-31,42,-92,69,-37,-64,11,79,71,52,44,-1,-49,-17,-83,-38,30,43,-6,30,70,2,21,72,-4,-24,-10,39,-12,-71,63,-52,15, 
  /* [0][2][][] */ 64,-81,5,29,-1,67,-84,-82,32,11,24,60,9,6,-42,-27,17,-37,14,-55,-15,3,15,-77,33,32,69,-10,4,-104,15,24,67,-85,71,15,-127,28,1,2,23,-5,98,-127,-72,12,-78,-8, 45,8,2,49,8,93,-39,-3,26,41,18,-127,-16,-87,-31,-35,40,-10,47,-82,-36,-10,-26,34,34,47,72,-37,-83,-113,-25,22,66,-91,68,32,21,49,53,-49,127,-66,127,106,-106,52,-127,19, -33,-10,-3,34,-20,39,-28,-4,7,11,-59,47,-65,-4,-2,-1,0,28,33,-2,-29,24,18,37,32,26,19,4,-7,-52,15,-15,4,-48,20,21,10,-15,37,9,57,-1,24,-10,-26,40,-26,-1, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.005190923810005188, 0.005662641953676939, 0.023501193150877953, 0.0032931836321949959, 0.02035876177251339, 0.025045605376362801, 0.0065766181796789169, 0.0084980037063360214, 0.0027304927352815866, 0.012135435827076435, 0.026975212618708611, 0.016356794163584709, 0.010915428400039673, 0.0073853558860719204, 0.0025916488375514746, 0.0025909999385476112, 0.0067049353383481503, 0.022662589326500893, 0.0027753815520554781, 0.0047484305687248707, 0.0027444993611425161, 0.045680612325668335, 0.067030534148216248, 0.014343990944325924, 0.0020962925627827644, 0.0092884767800569534, 0.0044169425964355469, 0.0065264911390841007, 0.0072440612129867077, 0.0061983317136764526, 0.022401943802833557, 0.0097672818228602409, 0.0055627715773880482, 0.011544953100383282, 0.0029080910608172417, 0.0046192603185772896, 0.016000129282474518, 0.017568685114383698, 0.0046746404841542244, 0.0072197895497083664, 0.0035092688631266356, 0.010320937260985374, 0.0044143013656139374, 0.017051029950380325, 0.0031517574097961187, 0.017293613404035568, 0.0038553096819669008, 0.035943832248449326, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 11431, 4780, 8615, 2263, 3954, 4304, -4106, 4280, 2704, -2894, -3492, 5396, -3335, -4789, 7726, 1688, -2044, 2186, -1902, 3195, 499, 4397, 798, -2609, -295, -5102, 2746, -3753, 3852, 7951, 522, 383, 7776, 10653, 7862, 4962, 5201, -4645, 1126, 4822, -917, -4670, 4180, 1944, 310, -6390, -12135, 2266, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00047313497634604573, 0.00067118188599124551, 0.00011218865984119475, 0.00081553147174417973, 0.00050093402387574315, 0.00043138265027664602, 0.0024554571136832237, 0.0013192954938858747, 0.0012195756426081061, 0.00046596009633503854, 0.00012300345406401902, 0.00060041010146960616, 0.00052853970555588603, 0.0013260766863822937, 0.00044573855120688677, 0.0017287101363763213, 0.0010985311819240451, 0.00030667797545902431, 0.0011390213621780276, 0.0017274735728278756, 0.00063979008700698614, 0.00048451026668772101, 0.00012438955309335142, 0.00051210587844252586, 0.0012615694431588054, 0.00082366261631250381, 0.0010018867906183004, 0.00038091192254796624, 0.0012508656363934278, 0.00076921534491702914, 0.00028366479091346264, 0.00057298649335280061, 0.0008563264855183661, 0.00028346484759822488, 0.00055674032773822546, 0.00043235853081569076, 0.0006513610715046525, 0.0014204067410901189, 0.0006876465049572289, 0.00071501993807032704, 0.001233515446074307, 0.00072298961458727717, 0.00085963087622076273, 0.00020878913346678019, 0.0012939975131303072, 0.00086138432379812002, 0.00096918956842273474, 0.0004890899290330708, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -103,-105,26,-127,-58,-5,-2,-6, 
  /* [1][0][][] */ -127,-14,96,-2,-53,25,4,17, 
  /* [2][0][][] */ 28,-8,20,127,30,-22,-14,-8, 
  /* [3][0][][] */ -106,-73,-25,-14,42,127,-48,-38, 
  /* [4][0][][] */ -5,-29,-8,0,-11,7,-127,-67, 
  /* [5][0][][] */ -3,-34,-15,-1,-11,10,-127,-69, 
  /* [6][0][][] */ 127,7,15,-12,-65,17,1,-5, 
  /* [7][0][][] */ -127,-30,-17,4,70,14,-2,10, 
  /* [8][0][][] */ 23,40,-13,-9,-29,-127,39,19, 
  /* [9][0][][] */ 74,22,-12,-6,-24,-3,-6,127, 
  /* [10][0][][] */ 124,-14,-123,9,-88,-11,46,127, 
  /* [11][0][][] */ -127,93,6,-39,78,-70,4,27, 
  /* [12][0][][] */ 127,-38,-110,13,50,-3,-10,-19, 
  /* [13][0][][] */ 127,11,12,-15,-28,28,8,-13, 
  /* [14][0][][] */ -115,-81,91,-21,75,-11,-38,-127, 
  /* [15][0][][] */ 35,71,-1,-2,-8,-127,-21,10, 
  /* [16][0][][] */ -11,-68,12,2,11,127,11,6, 
  /* [17][0][][] */ 34,-121,-75,-10,-32,127,-59,-14, 
  /* [18][0][][] */ 38,-18,-14,-18,-18,29,127,-15, 
  /* [19][0][][] */ -4,23,-2,-127,-10,35,-3,-11, 
  /* [20][0][][] */ -78,-36,77,12,54,101,-9,-127, 
  /* [21][0][][] */ -24,-5,30,-26,-17,10,-127,-78, 
  /* [22][0][][] */ 76,-6,11,127,-13,-10,62,36, 
  /* [23][0][][] */ 127,-18,-117,-13,30,-23,11,4, 
  /* [24][0][][] */ -32,23,25,32,12,3,-127,-87, 
  /* [25][0][][] */ 127,12,-84,8,16,-7,7,24, 
  /* [26][0][][] */ 2,53,-30,-127,-27,20,1,-1, 
  /* [27][0][][] */ 127,16,-105,-1,-98,42,23,76, 
  /* [28][0][][] */ -127,-23,-23,16,55,11,-5,35, 
  /* [29][0][][] */ -7,-126,-17,-127,-9,25,-19,-22, 
  /* [30][0][][] */ 5,82,127,30,39,-96,111,30, 
  /* [31][0][][] */ -76,-6,-127,43,3,-19,92,98, 
  /* [32][0][][] */ -3,-123,2,-127,-12,12,-10,-17, 
  /* [33][0][][] */ 14,-127,-5,-123,7,17,4,-25, 
  /* [34][0][][] */ -28,-49,28,-97,38,-55,127,77, 
  /* [35][0][][] */ -127,8,50,1,-110,-20,26,99, 
  /* [36][0][][] */ -127,12,115,-7,-40,21,-27,31, 
  /* [37][0][][] */ 127,12,-7,-7,-76,21,-1,17, 
  /* [38][0][][] */ -73,-3,86,40,67,-57,48,127, 
  /* [39][0][][] */ -127,-6,72,-3,-71,15,-10,6, 
  /* [40][0][][] */ -5,28,45,-15,25,-3,127,50, 
  /* [41][0][][] */ 127,-13,-74,3,53,14,8,-7, 
  /* [42][0][][] */ -16,-127,32,-7,14,7,-4,-17, 
  /* [43][0][][] */ 14,122,127,-9,60,-105,81,3, 
  /* [44][0][][] */ 6,-13,-3,117,0,-127,-2,3, 
  /* [45][0][][] */ 127,-32,32,-8,-61,105,7,3, 
  /* [46][0][][] */ 14,127,-17,105,2,124,24,38, 
  /* [47][0][][] */ -13,34,12,-29,30,-39,127,71, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0061801825650036335, 0.0087671102955937386, 0.0014654304832220078, 0.010652633383870125, 0.0065432991832494736, 0.005634805653244257, 0.032073665410280228, 0.017232898622751236, 0.015930337831377983, 0.0060864631086587906, 0.0016066954704001546, 0.0078426757827401161, 0.0069038900546729565, 0.017321476712822914, 0.005822325125336647, 0.022580754011869431, 0.014349231496453285, 0.0040058884769678116, 0.014878122135996819, 0.0225646011531353, 0.0083570647984743118, 0.0063287690281867981, 0.0016248009633272886, 0.0066892285831272602, 0.016478870064020157, 0.010758844204246998, 0.013086843304336071, 0.004975547082722187, 0.016339054331183434, 0.010047643445432186, 0.0037052854895591736, 0.0074844630435109138, 0.011185506358742714, 0.0037026740610599518, 0.0072722523473203182, 0.005647552665323019, 0.0085082072764635086, 0.018553633242845535, 0.0089821750298142433, 0.0093397321179509163, 0.016112422570586205, 0.0094438334926962852, 0.011228668503463268, 0.0027272449806332588, 0.01690245233476162, 0.011251572519540787, 0.012659746222198009, 0.0063885892741382122, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3740, -4518, -19, 3061, 2292, 448, -2430, 2139, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 8.0117235484067351e-05, 0.00016119195788633078, 8.1794409197755158e-05, 7.1839815063867718e-05, 0.00014801319048274308, 0.00017169557395391166, 0.00012410819181241095, 0.00021349248709157109, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -23,-2,-43,-32,-18,39,-127,-6, 
  /* [1][0][][] */ 21,92,1,127,7,-5,-8,-36, 
  /* [2][0][][] */ 127,-4,-35,-61,-71,44,100,-55, 
  /* [3][0][][] */ 12,-127,42,-80,17,-84,29,57, 
  /* [4][0][][] */ 127,-4,-63,-10,29,-3,-124,-49, 
  /* [5][0][][] */ 2,-32,3,37,4,-127,-1,9, 
  /* [6][0][][] */ 127,-25,118,2,108,-32,-4,5, 
  /* [7][0][][] */ -127,-2,-92,-3,-102,8,34,6, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0034049823880195618, 0.0068506579846143723, 0.0034762623254209757, 0.0030531920492649078, 0.0062905605882406235, 0.0072970618493855, 0.0052745980210602283, 0.009073430672287941, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -10377, 10837, 676, -12711, -139, -13692, 359, 133, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00042784833931364119, 0.00037931543192826211, 0.00019003232591785491, 0.00036953424569219351, 0.00078844063682481647, 0.0003172658325638622, 0.0012037650449201465, 0.0026947713922709227, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -1,0,14,17,7,1,8,29, 6,2,-39,127,-26,2,-5,28, -5,1,-10,19,-5,3,-6,19, 
  /* [0][1][][] */ -4,-2,127,-24,127,0,-113,40, 127,-127,-103,6,-95,127,-15,-127, -29,4,15,-19,-3,1,127,37, 
  /* [0][2][][] */ 1,1,12,5,10,-2,16,31, 5,4,-44,-1,-16,2,-10,-105, -5,1,-8,2,0,-2,-6,35, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.018183553591370583, 0.016120905056595802, 0.0080763734877109528, 0.015705205500125885, 0.033508725464344025, 0.013483797200024128, 0.051160015165805817, 0.11452778428792953, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 6562, 5867, -780, 36616, 4207, 10780, 98131, 9745, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00039637528243474662, 0.00030536521808244288, 0.00010536829358898103, 6.8935456511098891e-05, 0.00015672687732148916, 0.00021831848425790668, 1.7007469068630598e-05, 5.7782664953265339e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 122, 0, 
  /* [0][2][][] */ -43, 46, -1, 
  /* [1][0][][] */ 58, 127, 36, 
  /* [1][1][][] */ -67, -78, -43, 
  /* [1][2][][] */ 8, -41, 6, 
  /* [2][0][][] */ 30, 27, -47, 
  /* [2][1][][] */ 51, 68, -127, 
  /* [2][2][][] */ 21, 33, -57, 
  /* [3][0][][] */ 42, 53, 21, 
  /* [3][1][][] */ 53, 74, 27, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 5, -53, 48, 
  /* [4][1][][] */ 16, -127, 113, 
  /* [4][2][][] */ 5, -37, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ 0, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -19, -88, 0, 
  /* [6][1][][] */ -25, -127, -5, 
  /* [6][2][][] */ -15, -53, 5, 
  /* [7][0][][] */ 42, -127, 32, 
  /* [7][1][][] */ -21, -6, -10, 
  /* [7][2][][] */ -26, 71, -12, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.12360412627458572, 0.095223896205425262, 0.032857637852430344, 0.021496564149856567, 0.048873096704483032, 0.068079583346843719, 0.0053035430610179901, 0.018018720671534538, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.075018353760242462, } };
const TfArray<1, int> quant46_zero = { 1, { 29 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.076556794345378876, } };
const TfArray<1, int> quant47_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.052828818559646606, } };
const TfArray<1, int> quant51_zero = { 1, { -2 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023521142080426216, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.064045645296573639, } };
const TfArray<1, int> quant54_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.068239510059356689, } };
const TfArray<1, int> quant55_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.022936321794986725, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.022936321794986725, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023428099229931831, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.040138669312000275, } };
const TfArray<1, int> quant59_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.01662951335310936, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.019601469859480858, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.026173422113060951, } };
const TfArray<1, int> quant62_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.051230393350124359, } };
const TfArray<1, int> quant63_zero = { 1, { 1 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.016525100916624069, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.015988502651453018, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.036814048886299133, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.059823334217071533, } };
const TfArray<1, int> quant67_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.016241449862718582, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.021577822044491768, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.034895233809947968, } };
const TfArray<1, int> quant70_zero = { 1, { -35 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension70, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
